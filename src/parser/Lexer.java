/* The following code was generated by JFlex 1.4.3 on 11/2/13 10:50 PM */


package parser;

/**
   This is a lexical analyser generated by JFlex 1.4.3.
   We use it to tokenize input strings.

   The specification for the lexer can be found in the
   root folder of the project.
*/

@SuppressWarnings("unused")


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 11/2/13 10:50 PM from the specification file
 * <tt>lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\0\25\0\1\7\1\43\1\45\1\44\3\0\1\43\5\0"+
    "\1\16\1\41\1\16\1\11\1\15\1\13\1\14\2\42\3\12\1\17"+
    "\1\41\4\0\1\43\1\0\1\5\1\35\1\36\1\33\1\20\1\1"+
    "\1\27\1\25\1\26\1\34\1\23\1\31\1\4\1\10\1\3\1\37"+
    "\1\43\1\2\1\30\1\6\1\32\1\40\1\22\1\21\1\24\1\43"+
    "\6\0\1\5\1\35\1\36\1\33\1\20\1\1\1\27\1\25\1\26"+
    "\1\34\1\23\1\31\1\4\1\10\1\3\1\37\1\43\1\2\1\30"+
    "\1\6\1\32\1\40\1\22\1\21\1\24\1\43\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\20\2\2\1\21\2\1\0\17\2\1\3"+
    "\1\0\1\2\1\4\2\0\3\2\1\4\1\2\2\4"+
    "\1\2\2\5\1\2\1\0\5\2\11\0\2\2\2\4"+
    "\5\2\1\4\1\2\1\4\1\2\1\6\1\2\20\0"+
    "\3\2\1\4\3\2\1\0\6\4\3\0\1\5\7\0"+
    "\1\4\1\2\4\4\1\5\3\2\24\0\2\2\2\0"+
    "\1\2\1\4\7\2\12\4\6\2\5\0\1\4\3\0"+
    "\1\4\1\0\2\4\2\0\3\4\1\0\1\4\1\0"+
    "\1\5\1\0\2\2\10\0\1\4\2\2\10\0\2\2"+
    "\7\0\1\4\7\0\1\5\1\2\5\0\1\4\1\2"+
    "\3\0\2\2\6\0\1\4\4\0\1\2\10\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[295];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\46\0\114\0\162\0\230\0\276\0\344\0\u010a"+
    "\0\u0130\0\u0156\0\u017c\0\u01a2\0\u01c8\0\u01ee\0\u0214\0\u023a"+
    "\0\u0260\0\u0286\0\u02ac\0\u02d2\0\u02f8\0\u031e\0\u0344\0\u036a"+
    "\0\u0390\0\u03b6\0\u03dc\0\u0402\0\u0428\0\u044e\0\u0474\0\u049a"+
    "\0\u04c0\0\u04e6\0\u050c\0\u0532\0\u0558\0\u057e\0\u05a4\0\u05ca"+
    "\0\u05f0\0\u0616\0\u063c\0\u0662\0\u0688\0\u06ae\0\u06d4\0\u06fa"+
    "\0\u0720\0\u0746\0\u076c\0\u0792\0\u07b8\0\u02ac\0\u07de\0\u0804"+
    "\0\u082a\0\u0850\0\u0876\0\u089c\0\u08c2\0\u08e8\0\u090e\0\u0934"+
    "\0\u095a\0\u0980\0\u09a6\0\u05ca\0\162\0\u09cc\0\u09f2\0\u0a18"+
    "\0\u0a3e\0\u0a64\0\u0a8a\0\u0ab0\0\u0ad6\0\u0afc\0\u0b22\0\u0b48"+
    "\0\u0b6e\0\u0b94\0\u0bba\0\u0be0\0\u0c06\0\u0c2c\0\u0c52\0\u0c78"+
    "\0\u0c9e\0\u0cc4\0\u0cea\0\u0d10\0\u0d36\0\u0d5c\0\u0d82\0\u0da8"+
    "\0\u0dce\0\u0df4\0\46\0\u0e1a\0\u0e40\0\u0e66\0\u0e8c\0\u0eb2"+
    "\0\u0ed8\0\u0efe\0\u0f24\0\u0f4a\0\u0f70\0\u0f96\0\u0fbc\0\u0fe2"+
    "\0\u1008\0\u102e\0\u1054\0\u107a\0\u10a0\0\u10c6\0\u10ec\0\162"+
    "\0\u1112\0\u0980\0\u1138\0\u115e\0\u1184\0\u11aa\0\u11d0\0\u11f6"+
    "\0\u121c\0\u1242\0\u1268\0\u128e\0\u12b4\0\46\0\u12da\0\u1300"+
    "\0\u1326\0\u134c\0\u1372\0\u1398\0\u13be\0\u13e4\0\u140a\0\u1430"+
    "\0\u1456\0\u147c\0\u14a2\0\u14c8\0\u14ee\0\u1514\0\u153a\0\u1560"+
    "\0\u1586\0\u15ac\0\u15d2\0\u15f8\0\u161e\0\u1644\0\u166a\0\u1690"+
    "\0\u16b6\0\u16dc\0\u1702\0\u1728\0\u174e\0\u1774\0\u179a\0\u17c0"+
    "\0\u17e6\0\u180c\0\u1832\0\u1858\0\u187e\0\u18a4\0\u18ca\0\u18f0"+
    "\0\u1916\0\u193c\0\u1962\0\u1988\0\u19ae\0\u19d4\0\u19fa\0\u1a20"+
    "\0\u1a46\0\u1a6c\0\u1a92\0\u1ab8\0\u1ade\0\u1b04\0\u1b2a\0\u1b50"+
    "\0\u1b76\0\u1b9c\0\u1bc2\0\u1be8\0\u1c0e\0\u1c34\0\u1c5a\0\u082a"+
    "\0\u1c80\0\u1ca6\0\u1ccc\0\u1cf2\0\u1d18\0\u1d3e\0\u1d64\0\u1d8a"+
    "\0\u1db0\0\u1dd6\0\u1dfc\0\u1e22\0\u1e48\0\u1e6e\0\u1e94\0\u1eba"+
    "\0\u1ee0\0\u1f06\0\u1f2c\0\u1f52\0\u1f78\0\u17e6\0\u1f9e\0\u1fc4"+
    "\0\u1fea\0\u2010\0\u2036\0\u205c\0\u2082\0\u20a8\0\u20ce\0\u20f4"+
    "\0\u211a\0\u2140\0\u2166\0\u218c\0\u21b2\0\u21d8\0\u21fe\0\u2224"+
    "\0\u224a\0\u2270\0\u2296\0\u22bc\0\u22e2\0\u2308\0\u232e\0\u2354"+
    "\0\u237a\0\u23a0\0\u23c6\0\u23ec\0\u2412\0\46\0\u2438\0\u1e48"+
    "\0\u245e\0\u2484\0\u24aa\0\u24d0\0\u24f6\0\u17c0\0\u090e\0\u251c"+
    "\0\u2542\0\u2568\0\u258e\0\u25b4\0\u25da\0\u2600\0\u2626\0\u264c"+
    "\0\u2672\0\u2698\0\u26be\0\u26e4\0\u270a\0\u2730\0\u2756\0\u1d3e"+
    "\0\u277c\0\u27a2\0\u27c8\0\u27ee\0\u2814\0\u283a\0\u2860\0\u2886"+
    "\0\u28ac\0\u28d2\0\u28f8\0\u291e\0\u1dd6\0\u2944\0\u296a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[295];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\2"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\4\1\13"+
    "\2\4\1\17\2\4\1\20\2\4\1\21\1\22\10\4"+
    "\1\13\1\4\1\23\1\24\47\0\1\4\1\25\4\4"+
    "\1\0\34\4\3\0\6\4\1\0\34\4\3\0\6\4"+
    "\1\0\1\26\33\4\3\0\2\4\1\27\3\4\1\0"+
    "\34\4\3\0\5\4\1\30\1\0\34\4\3\0\2\4"+
    "\1\31\1\32\2\4\1\0\15\4\1\33\4\4\1\34"+
    "\11\4\3\0\6\4\1\0\10\4\1\35\23\4\3\0"+
    "\6\4\1\0\1\4\1\36\1\37\3\40\1\4\1\37"+
    "\21\4\1\41\1\40\1\4\3\0\1\42\1\4\1\43"+
    "\1\44\1\45\1\4\1\46\1\47\1\50\1\4\3\50"+
    "\1\51\11\4\1\52\2\4\1\53\1\54\2\4\1\55"+
    "\1\4\1\56\1\50\1\4\3\0\1\42\1\4\1\43"+
    "\1\44\1\45\1\4\1\46\1\47\1\40\1\57\3\40"+
    "\1\51\1\57\10\4\1\52\2\4\1\53\1\54\2\4"+
    "\1\55\1\4\1\56\1\60\1\4\3\0\1\42\1\4"+
    "\1\43\1\44\1\45\1\4\1\46\1\47\1\60\1\4"+
    "\2\50\1\60\1\51\11\4\1\52\2\4\1\53\1\54"+
    "\2\4\1\55\1\4\1\56\1\50\1\4\3\0\1\42"+
    "\1\4\1\43\1\44\1\45\1\4\1\46\1\47\1\61"+
    "\1\37\1\61\1\40\1\61\1\51\1\37\10\4\1\52"+
    "\2\4\1\53\1\54\2\4\1\55\1\4\1\56\1\40"+
    "\1\4\3\0\6\4\1\0\10\4\1\62\23\4\3\0"+
    "\4\4\1\63\1\4\1\0\34\4\3\0\4\4\1\64"+
    "\1\4\1\0\22\4\1\27\11\4\3\0\4\4\1\65"+
    "\1\4\1\0\34\4\3\0\6\66\1\0\34\66\3\0"+
    "\43\67\3\0\2\4\1\70\3\4\1\0\16\4\1\71"+
    "\15\4\3\0\6\4\1\72\34\4\3\0\6\4\1\0"+
    "\1\71\33\4\3\0\6\4\1\73\34\4\3\0\3\4"+
    "\1\74\2\4\1\0\1\75\22\4\1\76\10\4\3\0"+
    "\1\4\1\77\4\4\1\0\34\4\3\0\6\4\1\0"+
    "\16\4\1\100\3\4\1\101\11\4\3\0\6\4\1\0"+
    "\10\4\1\102\23\4\3\0\6\4\1\0\11\4\1\103"+
    "\22\4\3\0\6\4\1\0\1\4\1\104\1\105\3\104"+
    "\1\4\1\105\21\4\1\41\1\104\1\4\3\0\1\42"+
    "\1\4\1\43\1\44\1\106\1\4\1\107\1\47\1\50"+
    "\1\4\3\50\1\51\11\4\1\52\2\4\1\53\1\54"+
    "\4\4\1\41\1\50\1\4\3\0\1\42\1\4\1\43"+
    "\1\44\1\106\1\4\1\107\1\47\1\104\1\105\3\104"+
    "\1\51\1\105\10\4\1\52\2\4\1\53\1\54\4\4"+
    "\1\41\1\104\1\4\3\0\6\4\1\0\1\4\1\50"+
    "\1\4\3\50\24\4\1\50\1\4\3\0\6\4\1\0"+
    "\10\4\1\110\23\4\3\0\6\4\1\0\26\4\1\111"+
    "\5\4\3\0\4\4\1\112\1\4\1\0\34\4\3\0"+
    "\3\4\1\105\2\4\1\0\22\4\1\113\4\4\1\114"+
    "\4\4\3\0\1\115\1\0\1\116\1\117\1\120\1\0"+
    "\1\46\1\121\17\0\1\122\2\0\1\123\1\124\2\0"+
    "\1\125\7\0\2\4\1\126\3\4\1\0\34\4\3\0"+
    "\6\4\1\0\1\4\5\105\1\4\1\105\22\4\1\105"+
    "\1\4\3\0\6\4\1\0\1\4\1\127\3\130\1\131"+
    "\1\4\1\130\22\4\1\130\1\4\3\0\6\4\1\0"+
    "\10\4\1\132\23\4\3\0\6\4\1\0\10\4\1\133"+
    "\23\4\3\0\4\4\1\134\1\4\1\0\22\4\1\135"+
    "\11\4\3\0\3\4\1\105\2\4\1\0\34\4\3\0"+
    "\6\4\1\0\1\4\1\136\1\4\3\136\24\4\1\136"+
    "\1\4\3\0\1\42\1\4\1\43\1\44\1\106\1\4"+
    "\1\107\1\47\5\4\1\51\11\4\1\52\2\4\1\53"+
    "\1\54\7\4\3\0\1\42\1\4\1\43\1\44\1\106"+
    "\1\4\1\107\1\47\5\105\1\51\1\105\10\4\1\52"+
    "\2\4\1\53\1\54\5\4\1\105\1\4\3\0\1\42"+
    "\1\4\1\43\1\44\1\45\1\4\1\46\1\47\1\104"+
    "\1\105\3\104\1\51\1\105\10\4\1\52\2\4\1\53"+
    "\1\54\2\4\1\55\1\4\1\56\1\104\1\4\3\0"+
    "\6\4\1\0\23\4\1\137\10\4\3\0\6\4\1\0"+
    "\21\4\1\140\12\4\3\0\5\4\1\141\1\0\34\4"+
    "\3\0\6\4\1\0\20\4\1\142\13\4\3\0\43\67"+
    "\1\0\1\143\1\0\3\4\1\144\2\4\1\0\34\4"+
    "\3\0\6\4\1\0\23\4\1\76\10\4\3\0\1\145"+
    "\2\0\1\146\1\0\1\147\1\72\1\150\1\151\1\152"+
    "\1\153\1\154\1\153\1\0\1\152\2\0\1\155\2\0"+
    "\1\156\2\0\1\157\1\160\10\0\1\152\12\0\1\73"+
    "\1\0\1\161\1\162\1\163\1\162\1\164\1\0\1\162"+
    "\22\0\1\162\4\0\2\4\1\165\3\4\1\0\34\4"+
    "\3\0\6\4\1\0\16\4\1\166\15\4\3\0\4\4"+
    "\1\167\1\4\1\0\34\4\3\0\6\4\1\0\12\4"+
    "\1\170\21\4\3\0\6\4\1\0\20\4\1\171\13\4"+
    "\3\0\1\4\1\172\4\4\1\0\34\4\3\0\6\4"+
    "\1\0\20\4\1\71\13\4\3\0\5\4\1\173\1\0"+
    "\34\4\3\0\6\4\1\0\22\4\1\113\4\4\1\114"+
    "\4\4\3\0\1\115\1\0\1\116\1\117\1\174\1\0"+
    "\1\107\1\121\17\0\1\122\2\0\1\123\1\124\12\0"+
    "\6\4\1\0\25\4\1\175\6\4\3\0\5\4\1\176"+
    "\1\0\34\4\3\0\1\4\1\177\4\4\1\0\14\4"+
    "\1\200\17\4\3\0\6\4\1\0\17\4\1\201\14\4"+
    "\3\0\1\4\1\202\4\4\1\0\34\4\22\0\1\203"+
    "\63\0\1\204\14\0\1\205\44\0\1\206\25\0\1\207"+
    "\4\0\1\210\11\0\1\211\62\0\1\212\45\0\1\213"+
    "\32\0\1\214\24\0\1\215\17\0\1\206\42\0\6\4"+
    "\1\0\30\4\1\216\3\4\3\0\6\4\1\0\2\4"+
    "\4\130\1\4\1\130\22\4\1\130\1\4\3\0\6\4"+
    "\1\0\6\4\1\217\25\4\3\0\6\4\1\0\1\4"+
    "\1\130\1\4\1\130\1\4\1\130\1\217\25\4\3\0"+
    "\6\4\1\0\27\4\1\220\4\4\3\0\6\4\1\0"+
    "\26\4\1\216\5\4\3\0\6\4\1\0\1\221\33\4"+
    "\3\0\6\4\1\0\1\222\20\4\1\223\12\4\3\0"+
    "\6\4\1\0\1\4\5\224\1\4\1\224\22\4\1\224"+
    "\1\4\3\0\6\4\1\0\1\225\33\4\3\0\6\4"+
    "\1\0\21\4\1\226\12\4\3\0\6\4\1\0\22\4"+
    "\1\227\11\4\3\0\5\4\1\171\1\0\34\4\3\0"+
    "\6\4\1\230\34\4\4\0\1\231\46\0\1\232\45\0"+
    "\1\233\1\234\20\0\1\235\4\0\1\236\33\0\1\237"+
    "\37\0\4\152\1\0\1\152\22\0\1\152\4\0\1\115"+
    "\1\0\1\116\1\117\1\174\1\0\1\107\1\121\5\0"+
    "\1\240\11\0\1\122\2\0\1\123\1\124\12\0\1\115"+
    "\1\0\1\116\1\117\1\174\1\0\1\107\1\121\5\152"+
    "\1\240\1\152\10\0\1\122\2\0\1\123\1\124\5\0"+
    "\1\152\4\0\1\115\1\0\1\116\1\117\1\174\1\0"+
    "\1\107\1\121\1\152\3\0\1\152\1\240\11\0\1\122"+
    "\2\0\1\123\1\124\31\0\1\241\32\0\1\242\45\0"+
    "\1\243\24\0\1\232\20\0\1\244\51\0\1\245\1\246"+
    "\3\245\1\0\1\246\21\0\1\247\1\245\10\0\1\125"+
    "\1\0\1\250\1\0\1\251\1\0\3\251\21\0\1\125"+
    "\1\0\1\252\1\251\10\0\1\125\1\0\1\250\1\0"+
    "\1\245\1\0\3\245\21\0\1\125\1\0\1\252\1\251"+
    "\10\0\1\125\1\0\1\250\1\0\1\253\1\246\1\253"+
    "\1\245\1\253\1\0\1\246\17\0\1\125\1\0\1\252"+
    "\1\245\4\0\1\4\1\254\4\4\1\0\34\4\3\0"+
    "\6\4\1\0\17\4\1\255\14\4\3\0\6\4\1\0"+
    "\14\4\1\170\17\4\3\0\6\4\1\256\34\4\3\0"+
    "\6\4\1\257\34\4\34\0\1\207\4\0\1\210\7\0"+
    "\1\4\1\260\4\4\1\261\1\4\2\262\1\263\1\262"+
    "\1\264\1\4\1\262\22\4\1\262\1\4\3\0\2\4"+
    "\1\265\3\4\1\261\1\4\2\262\1\263\1\262\1\264"+
    "\1\4\1\262\22\4\1\262\1\4\3\0\6\4\1\261"+
    "\1\4\2\262\1\263\1\262\1\264\1\4\1\262\16\4"+
    "\1\266\3\4\1\262\1\4\3\0\6\4\1\261\1\4"+
    "\2\262\1\263\1\262\1\264\1\4\1\262\22\4\1\262"+
    "\1\4\3\0\6\4\1\261\1\4\2\262\1\263\1\262"+
    "\1\264\1\4\1\262\12\4\1\267\7\4\1\262\1\4"+
    "\3\0\6\4\1\261\1\4\2\262\1\263\1\262\1\264"+
    "\1\4\1\262\6\4\1\270\13\4\1\262\1\4\37\0"+
    "\1\271\16\0\1\272\41\0\1\273\21\0\1\261\50\0"+
    "\1\274\20\0\1\275\103\0\1\276\44\0\1\277\44\0"+
    "\1\276\17\0\1\300\45\0\1\301\20\0\1\302\15\0"+
    "\6\4\1\261\1\4\2\262\1\263\1\262\1\264\1\4"+
    "\1\262\1\303\21\4\1\262\1\4\3\0\6\4\1\0"+
    "\1\4\2\262\1\263\1\262\1\264\1\4\1\262\22\4"+
    "\1\262\1\4\3\0\5\4\1\304\1\261\1\4\2\262"+
    "\1\263\1\262\1\264\1\4\1\262\22\4\1\262\1\4"+
    "\3\0\6\4\1\261\1\4\2\262\1\263\1\262\1\264"+
    "\1\4\1\262\12\4\1\305\7\4\1\262\1\4\3\0"+
    "\6\4\1\261\1\4\2\262\1\263\1\262\1\264\1\4"+
    "\1\262\1\200\21\4\1\262\1\4\3\0\6\4\1\261"+
    "\1\4\2\262\1\263\1\262\1\264\1\4\1\262\4\4"+
    "\1\200\15\4\1\262\1\4\3\0\4\4\1\55\1\4"+
    "\1\250\27\4\1\55\4\4\3\0\6\4\1\0\10\4"+
    "\1\306\23\4\3\0\2\4\1\307\3\4\1\0\34\4"+
    "\3\0\1\4\1\310\4\4\1\0\34\4\3\0\1\145"+
    "\2\0\1\146\1\0\1\147\1\230\1\150\1\311\1\312"+
    "\1\313\1\314\1\315\1\0\1\312\2\0\1\155\2\0"+
    "\1\156\2\0\1\157\1\160\10\0\1\312\31\0\1\316"+
    "\27\0\1\316\41\0\1\317\3\0\1\320\22\0\1\321"+
    "\14\0\1\322\71\0\1\323\3\0\1\324\33\0\1\325"+
    "\46\0\1\326\35\0\1\327\3\330\1\331\1\0\1\330"+
    "\22\0\1\330\36\0\1\332\43\0\1\333\22\0\1\334"+
    "\67\0\1\335\26\0\1\336\1\206\3\336\1\0\1\206"+
    "\21\0\1\247\1\336\14\0\1\251\1\0\3\251\23\0"+
    "\1\247\1\251\14\0\1\251\1\0\3\251\24\0\1\251"+
    "\10\0\1\125\1\0\1\250\27\0\1\125\17\0\5\206"+
    "\1\0\1\206\22\0\1\206\14\0\1\337\1\0\3\337"+
    "\24\0\1\337\10\0\1\125\1\0\1\250\1\0\1\336"+
    "\1\206\3\336\1\0\1\206\17\0\1\125\1\0\1\252"+
    "\1\336\4\0\1\4\1\340\4\4\1\0\34\4\3\0"+
    "\6\4\1\0\15\4\1\341\16\4\3\0\1\145\2\0"+
    "\1\146\1\0\1\342\1\256\12\0\1\155\5\0\1\157"+
    "\16\0\1\343\2\0\1\344\1\0\1\342\1\257\12\0"+
    "\1\345\1\0\1\346\3\0\1\157\16\0\6\4\1\0"+
    "\22\4\1\305\11\4\11\0\1\261\1\0\2\347\1\350"+
    "\1\347\1\351\1\0\1\347\22\0\1\347\4\0\6\4"+
    "\1\0\1\4\5\170\1\4\1\170\22\4\1\170\1\4"+
    "\3\0\6\4\1\0\1\4\1\352\4\170\1\4\1\170"+
    "\22\4\1\170\1\4\3\0\6\4\1\0\1\4\5\170"+
    "\1\4\1\352\22\4\1\170\1\4\3\0\6\4\1\0"+
    "\25\4\1\353\6\4\3\0\6\4\1\0\15\4\1\200"+
    "\16\4\3\0\6\4\1\0\20\4\1\354\13\4\3\0"+
    "\6\4\1\0\21\4\1\200\12\4\4\0\1\355\4\0"+
    "\1\261\1\0\2\347\1\350\1\347\1\351\1\0\1\347"+
    "\22\0\1\347\6\0\1\356\3\0\1\261\1\0\2\347"+
    "\1\350\1\347\1\351\1\0\1\347\22\0\1\347\12\0"+
    "\1\261\1\0\2\347\1\350\1\347\1\351\1\0\1\347"+
    "\16\0\1\357\3\0\1\347\12\0\1\261\1\0\2\347"+
    "\1\350\1\347\1\351\1\0\1\347\12\0\1\360\7\0"+
    "\1\347\12\0\1\261\1\0\2\347\1\350\1\347\1\351"+
    "\1\0\1\347\6\0\1\361\13\0\1\347\12\0\1\261"+
    "\1\0\2\347\1\350\1\347\1\351\1\0\1\347\1\362"+
    "\21\0\1\347\11\0\1\363\1\261\1\0\2\347\1\350"+
    "\1\347\1\351\1\0\1\347\22\0\1\347\12\0\1\261"+
    "\1\0\2\347\1\350\1\347\1\351\1\0\1\347\12\0"+
    "\1\364\7\0\1\347\12\0\1\261\1\0\2\347\1\350"+
    "\1\347\1\351\1\0\1\347\1\261\21\0\1\347\12\0"+
    "\1\261\1\0\2\347\1\350\1\347\1\351\1\0\1\347"+
    "\4\0\1\261\15\0\1\347\4\0\3\4\1\265\2\4"+
    "\1\0\34\4\3\0\6\4\1\0\10\4\1\303\23\4"+
    "\3\0\4\4\1\365\1\4\1\0\34\4\3\0\6\4"+
    "\1\0\20\4\1\310\13\4\3\0\6\4\1\0\12\4"+
    "\1\366\21\4\13\0\1\245\1\367\3\370\1\0\1\367"+
    "\21\0\1\247\1\370\4\0\1\115\1\0\1\116\1\117"+
    "\1\120\1\0\1\46\1\121\1\251\1\0\3\251\1\240"+
    "\11\0\1\122\2\0\1\123\1\124\2\0\1\125\1\0"+
    "\1\252\1\251\4\0\1\115\1\0\1\116\1\117\1\120"+
    "\1\0\1\46\1\121\1\370\1\152\3\370\1\240\1\152"+
    "\10\0\1\122\2\0\1\123\1\124\2\0\1\125\1\0"+
    "\1\252\1\371\4\0\1\115\1\0\1\116\1\117\1\120"+
    "\1\0\1\46\1\121\1\371\1\0\2\251\1\371\1\240"+
    "\11\0\1\122\2\0\1\123\1\124\2\0\1\125\1\0"+
    "\1\252\1\251\4\0\1\115\1\0\1\116\1\117\1\120"+
    "\1\0\1\46\1\121\1\372\1\367\1\372\1\370\1\372"+
    "\1\240\1\367\10\0\1\122\2\0\1\123\1\124\2\0"+
    "\1\125\1\0\1\252\1\370\36\0\1\321\15\0\1\373"+
    "\70\0\1\374\24\0\1\375\62\0\1\376\53\0\1\377"+
    "\17\0\1\u0100\73\0\1\316\23\0\1\u0101\51\0\4\330"+
    "\1\0\1\330\22\0\1\330\21\0\1\u0102\40\0\1\330"+
    "\1\0\1\330\1\0\1\330\1\u0102\37\0\1\u0103\66\0"+
    "\1\u0104\46\0\1\u0105\21\0\1\377\50\0\5\u0106\1\0"+
    "\1\u0106\22\0\1\u0106\4\0\2\4\1\u0107\3\4\1\0"+
    "\34\4\3\0\5\4\1\170\1\0\34\4\27\0\1\u0108"+
    "\4\0\1\236\15\0\1\231\1\u0109\45\0\1\u010a\62\0"+
    "\1\u010b\45\0\1\u010c\36\0\5\376\1\0\1\376\22\0"+
    "\1\376\14\0\1\u010d\4\376\1\0\1\376\22\0\1\376"+
    "\14\0\5\376\1\0\1\u010d\22\0\1\376\4\0\6\4"+
    "\1\0\1\4\5\262\1\4\1\262\22\4\1\262\1\4"+
    "\3\0\6\4\1\0\10\4\1\u010e\23\4\3\0\5\4"+
    "\1\200\1\0\34\4\34\0\1\364\50\0\1\u010f\35\0"+
    "\1\261\50\0\1\u0110\46\0\1\261\20\0\1\356\61\0"+
    "\1\362\32\0\1\u0111\41\0\1\4\1\u0112\4\4\1\0"+
    "\34\4\3\0\6\4\1\0\10\4\1\u0113\23\4\3\0"+
    "\1\115\1\0\1\116\1\117\1\174\1\0\1\107\1\121"+
    "\1\251\1\0\3\251\1\240\11\0\1\122\2\0\1\123"+
    "\1\124\4\0\1\247\1\251\4\0\1\115\1\0\1\116"+
    "\1\117\1\174\1\0\1\107\1\121\1\336\1\206\3\336"+
    "\1\240\1\206\10\0\1\122\2\0\1\123\1\124\4\0"+
    "\1\247\1\336\4\0\1\115\1\0\1\116\1\117\1\174"+
    "\1\0\1\107\1\121\5\206\1\240\1\206\10\0\1\122"+
    "\2\0\1\123\1\124\5\0\1\206\4\0\1\115\1\0"+
    "\1\116\1\117\1\120\1\0\1\46\1\121\1\336\1\206"+
    "\3\336\1\240\1\206\10\0\1\122\2\0\1\123\1\124"+
    "\2\0\1\125\1\0\1\252\1\336\5\0\1\u0114\72\0"+
    "\1\u0115\42\0\1\376\30\0\1\256\45\0\1\257\47\0"+
    "\2\347\1\350\1\347\1\351\1\0\1\347\22\0\1\347"+
    "\23\0\1\u0116\30\0\1\u0117\44\0\1\u0118\75\0\1\324"+
    "\15\0\1\u0119\53\0\1\u011a\55\0\1\u011b\12\0\1\332"+
    "\17\0\1\u011c\51\0\5\347\1\0\1\347\22\0\1\347"+
    "\4\0\1\4\1\200\4\4\1\0\34\4\22\0\1\u011d"+
    "\33\0\1\261\41\0\1\u011e\44\0\6\4\1\0\14\4"+
    "\1\200\17\4\3\0\6\4\1\0\10\4\1\u011f\23\4"+
    "\4\0\1\u0120\70\0\1\u0121\50\0\1\u0118\37\0\1\u0122"+
    "\31\0\1\u0123\45\0\1\u0124\24\0\1\321\35\0\1\376"+
    "\24\0\1\376\45\0\1\261\67\0\1\261\22\0\6\4"+
    "\1\0\1\170\33\4\5\0\1\u0125\50\0\1\376\57\0"+
    "\1\u0126\35\0\1\320\62\0\1\376\40\0\1\u0127\35\0"+
    "\1\376\35\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10640];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\43\1\1\0\20\1\1\0\2\1\2\0"+
    "\13\1\1\0\5\1\11\0\15\1\1\11\1\1\20\0"+
    "\7\1\1\0\6\1\3\0\1\11\7\0\12\1\24\0"+
    "\2\1\2\0\31\1\5\0\1\1\3\0\1\1\1\0"+
    "\2\1\2\0\3\1\1\0\1\1\1\0\1\1\1\0"+
    "\2\1\10\0\3\1\10\0\2\1\7\0\1\11\7\0"+
    "\2\1\5\0\2\1\3\0\2\1\6\0\1\1\4\0"+
    "\1\1\10\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[295];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  String name;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 156) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 2: 
          { return new WordToken(yytext());
          }
        case 7: break;
        case 3: 
          { return new TagToken(yytext());
          }
        case 8: break;
        case 5: 
          { String contents = yytext();
	String[] split = contents.split("\\s+", 2);

	// Handles the optional qualifier
	if (split.length == 2 && (split[0].equalsIgnoreCase("at") || split[0].equalsIgnoreCase("from"))) {
		return new TimeToken(split[1].trim());
	}
	else {
		return new TimeToken(yytext());
	}
          }
        case 9: break;
        case 6: 
          { String contents = yytext();
    return new WordToken(contents.substring(1, contents.length()-1));
          }
        case 10: break;
        case 4: 
          { String contents = yytext();
	String[] split = contents.split("\\s+", 2);

	// Handles the optional qualifier
	if (split.length == 2 && (split[0].equalsIgnoreCase("on") || split[0].equalsIgnoreCase("from"))) {
		return new DateToken(split[1].trim());
	}
	else {
		return new DateToken(yytext());
	}
          }
        case 11: break;
        case 1: 
          { 
          }
        case 12: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
