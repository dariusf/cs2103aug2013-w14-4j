/* The following code was generated by JFlex 1.4.3 on 10/24/13 6:54 PM */


package parser;

/**
   This is a lexical analyser generated by JFlex 1.4.3.
   We use it to tokenize input strings.

   The specification for the lexer can be found in the
   root folder of the project.
*/

@SuppressWarnings("unused")


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 10/24/13 6:54 PM from the specification file
 * <tt>lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\0\25\0\1\7\1\43\1\45\1\44\3\0\1\43\5\0"+
    "\1\16\1\41\1\16\1\11\1\15\1\13\1\14\2\42\3\12\1\17"+
    "\1\41\4\0\1\43\1\0\1\5\1\35\1\36\1\33\1\20\1\1"+
    "\1\27\1\25\1\26\1\34\1\23\1\31\1\4\1\10\1\3\1\37"+
    "\1\43\1\2\1\30\1\6\1\32\1\40\1\22\1\21\1\24\1\43"+
    "\6\0\1\5\1\35\1\36\1\33\1\20\1\1\1\27\1\25\1\26"+
    "\1\34\1\23\1\31\1\4\1\10\1\3\1\37\1\43\1\2\1\30"+
    "\1\6\1\32\1\40\1\22\1\21\1\24\1\43\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\21\2\2\1\22\2\1\0\21\2\1\3"+
    "\1\0\1\2\1\4\1\2\1\0\1\4\1\0\2\2"+
    "\1\4\1\2\2\4\1\2\2\5\1\2\1\0\5\2"+
    "\11\0\2\2\2\4\6\2\1\4\2\2\1\4\1\2"+
    "\1\6\2\2\15\0\1\2\4\0\2\2\1\4\3\2"+
    "\1\0\6\4\3\0\1\5\7\0\1\4\1\2\4\4"+
    "\1\5\3\2\1\0\1\2\26\0\1\2\2\0\1\2"+
    "\1\4\7\2\12\4\6\2\5\0\1\2\1\4\1\0"+
    "\1\4\2\0\1\4\1\0\2\4\2\0\2\4\1\0"+
    "\1\4\2\0\1\4\1\0\1\5\1\0\1\2\7\0"+
    "\1\4\2\2\10\0\2\2\4\0\1\2\4\0\1\4"+
    "\7\0\1\5\1\2\2\0\1\4\1\2\3\0\3\2"+
    "\7\0\1\2\10\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[305];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\46\0\114\0\162\0\230\0\276\0\344\0\u010a"+
    "\0\u0130\0\u0156\0\u017c\0\u01a2\0\u01c8\0\u01ee\0\u0214\0\u023a"+
    "\0\u0260\0\u0286\0\u02ac\0\u02d2\0\u02f8\0\u031e\0\u0344\0\u036a"+
    "\0\u0390\0\u03b6\0\u03dc\0\u0402\0\u0428\0\u044e\0\u0474\0\u049a"+
    "\0\u04c0\0\u04e6\0\u050c\0\u0532\0\u0558\0\u057e\0\u05a4\0\u05ca"+
    "\0\u05f0\0\u0616\0\u063c\0\u0662\0\u0688\0\u06ae\0\u06d4\0\u06fa"+
    "\0\u0720\0\u0746\0\u076c\0\u0792\0\u07b8\0\u07de\0\u0804\0\u082a"+
    "\0\u0850\0\u02d2\0\u0876\0\u089c\0\u08c2\0\u08e8\0\u090e\0\u0934"+
    "\0\u095a\0\u0980\0\u09a6\0\u09cc\0\u09f2\0\u0a18\0\u0a3e\0\u0a64"+
    "\0\u0616\0\162\0\u0a8a\0\u0ab0\0\u0ad6\0\u0afc\0\u0b22\0\u0b48"+
    "\0\u0b6e\0\u0b94\0\u0bba\0\u0be0\0\u0c06\0\u0c2c\0\u0c52\0\u0c78"+
    "\0\u0c9e\0\u0cc4\0\u0cea\0\u0d10\0\u0d36\0\u0d5c\0\u0d82\0\u0da8"+
    "\0\u0dce\0\u0df4\0\u0e1a\0\u0e40\0\u0e66\0\u0e8c\0\u0eb2\0\u0ed8"+
    "\0\u0efe\0\46\0\u0f24\0\u0f4a\0\u0f70\0\u0f96\0\u0fbc\0\u0fe2"+
    "\0\u1008\0\u102e\0\u1054\0\u107a\0\u10a0\0\u10c6\0\u10ec\0\u1112"+
    "\0\u1138\0\u115e\0\u1184\0\u11aa\0\u11d0\0\u11f6\0\u121c\0\u1242"+
    "\0\162\0\u1268\0\u0a3e\0\u128e\0\u12b4\0\u12da\0\u1300\0\u1326"+
    "\0\u134c\0\u1372\0\u1398\0\u13be\0\u13e4\0\u140a\0\46\0\u1430"+
    "\0\u1456\0\u147c\0\u14a2\0\u14c8\0\u14ee\0\u1514\0\u153a\0\u1560"+
    "\0\u1586\0\u15ac\0\u15d2\0\u15f8\0\u161e\0\u1644\0\u166a\0\u1690"+
    "\0\u16b6\0\u16dc\0\u1702\0\u1728\0\u174e\0\u1774\0\u179a\0\u17c0"+
    "\0\u17e6\0\u180c\0\u1832\0\u1858\0\u187e\0\u18a4\0\u18ca\0\u18f0"+
    "\0\u1916\0\u193c\0\u1962\0\u1988\0\u19ae\0\u19d4\0\u19fa\0\u1a20"+
    "\0\u1a46\0\u1a6c\0\u1a92\0\u1ab8\0\u1ade\0\u1b04\0\u1b2a\0\u1b50"+
    "\0\u1b76\0\u1b9c\0\u1bc2\0\u1be8\0\u1c0e\0\u1c34\0\u1c5a\0\u1c80"+
    "\0\u1ca6\0\u1ccc\0\u1cf2\0\u1d18\0\u1d3e\0\u1d64\0\u1d8a\0\u1db0"+
    "\0\u1dd6\0\u1dfc\0\u1e22\0\u08c2\0\u1e48\0\u1e6e\0\u1e94\0\u1eba"+
    "\0\u1ee0\0\u1f06\0\u1f2c\0\u1f52\0\u1f78\0\u1f9e\0\u1fc4\0\u1fea"+
    "\0\u2010\0\u2036\0\u205c\0\u2082\0\u20a8\0\u20ce\0\u20f4\0\u211a"+
    "\0\u2140\0\u2166\0\u218c\0\u21b2\0\u21d8\0\u19d4\0\u21fe\0\u2224"+
    "\0\u224a\0\u2270\0\u2296\0\u22bc\0\u22e2\0\u2308\0\u232e\0\u2354"+
    "\0\u237a\0\u23a0\0\u23c6\0\u23ec\0\u2412\0\u2438\0\u245e\0\u2484"+
    "\0\u24aa\0\u24d0\0\u24f6\0\u251c\0\u2542\0\u2568\0\u258e\0\u25b4"+
    "\0\u25da\0\u2600\0\u2626\0\u264c\0\u2672\0\46\0\u2698\0\u205c"+
    "\0\u26be\0\u26e4\0\u270a\0\u2730\0\u2756\0\u19ae\0\u09cc\0\u277c"+
    "\0\u27a2\0\u27c8\0\u27ee\0\u2814\0\u283a\0\u2860\0\u2886\0\u28ac"+
    "\0\u28d2\0\u28f8\0\u291e\0\u2944\0\u296a\0\u1f2c\0\u2990\0\u29b6"+
    "\0\u29dc\0\u2a02\0\u2a28\0\u2a4e\0\u2a74\0\u1fea\0\u2a9a\0\u2ac0"+
    "\0\u2ae6";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[305];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\2"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\4\1\13"+
    "\2\4\1\17\1\4\1\20\1\21\2\4\1\22\1\23"+
    "\10\4\1\13\1\4\1\24\1\25\47\0\1\4\1\26"+
    "\1\27\3\4\1\0\34\4\3\0\6\4\1\0\34\4"+
    "\3\0\6\4\1\0\1\30\33\4\3\0\2\4\1\31"+
    "\3\4\1\0\34\4\3\0\5\4\1\32\1\0\34\4"+
    "\3\0\2\4\1\33\1\34\2\4\1\0\15\4\1\35"+
    "\4\4\1\36\11\4\3\0\6\4\1\0\10\4\1\37"+
    "\23\4\3\0\6\4\1\0\1\4\1\40\1\41\3\42"+
    "\1\4\1\41\21\4\1\43\1\42\1\4\3\0\1\44"+
    "\1\4\1\45\1\46\1\47\1\4\1\50\1\51\1\52"+
    "\1\4\3\52\1\53\11\4\1\54\2\4\1\55\1\56"+
    "\2\4\1\57\1\4\1\60\1\52\1\4\3\0\1\44"+
    "\1\4\1\45\1\46\1\47\1\4\1\50\1\51\1\42"+
    "\1\61\3\42\1\53\1\61\10\4\1\54\2\4\1\55"+
    "\1\56\2\4\1\57\1\4\1\60\1\62\1\4\3\0"+
    "\1\44\1\4\1\45\1\46\1\47\1\4\1\50\1\51"+
    "\1\62\1\4\2\52\1\62\1\53\11\4\1\54\2\4"+
    "\1\55\1\56\2\4\1\57\1\4\1\60\1\52\1\4"+
    "\3\0\1\44\1\4\1\45\1\46\1\47\1\4\1\50"+
    "\1\51\1\63\1\41\1\63\1\42\1\63\1\53\1\41"+
    "\10\4\1\54\2\4\1\55\1\56\2\4\1\57\1\4"+
    "\1\60\1\42\1\4\3\0\6\4\1\0\10\4\1\64"+
    "\23\4\3\0\6\4\1\0\10\4\1\65\23\4\3\0"+
    "\4\4\1\66\1\4\1\0\34\4\3\0\4\4\1\67"+
    "\1\4\1\0\22\4\1\70\11\4\3\0\4\4\1\71"+
    "\1\4\1\0\34\4\3\0\6\72\1\0\34\72\3\0"+
    "\43\73\3\0\2\4\1\74\3\4\1\0\16\4\1\75"+
    "\15\4\3\0\1\4\1\76\4\4\1\0\34\4\3\0"+
    "\6\4\1\77\34\4\3\0\6\4\1\0\1\100\33\4"+
    "\3\0\6\4\1\101\34\4\3\0\3\4\1\102\2\4"+
    "\1\0\23\4\1\103\10\4\3\0\1\4\1\104\4\4"+
    "\1\0\34\4\3\0\6\4\1\0\16\4\1\105\3\4"+
    "\1\106\11\4\3\0\6\4\1\0\10\4\1\107\23\4"+
    "\3\0\6\4\1\0\11\4\1\110\22\4\3\0\6\4"+
    "\1\0\1\4\1\111\1\112\3\111\1\4\1\112\21\4"+
    "\1\43\1\111\1\4\3\0\1\44\1\4\1\45\1\46"+
    "\1\113\1\4\1\114\1\51\1\52\1\4\3\52\1\53"+
    "\11\4\1\54\2\4\1\55\1\56\4\4\1\43\1\52"+
    "\1\4\3\0\1\44\1\4\1\45\1\46\1\113\1\4"+
    "\1\114\1\51\1\111\1\112\3\111\1\53\1\112\10\4"+
    "\1\54\2\4\1\55\1\56\4\4\1\43\1\111\1\4"+
    "\3\0\6\4\1\0\1\4\1\52\1\4\3\52\24\4"+
    "\1\52\1\4\3\0\6\4\1\0\10\4\1\115\23\4"+
    "\3\0\6\4\1\0\26\4\1\116\5\4\3\0\4\4"+
    "\1\117\1\4\1\0\34\4\3\0\3\4\1\112\2\4"+
    "\1\0\22\4\1\120\4\4\1\121\4\4\3\0\1\122"+
    "\1\0\1\123\1\124\1\125\1\0\1\50\1\126\17\0"+
    "\1\127\2\0\1\130\1\131\2\0\1\132\7\0\2\4"+
    "\1\133\3\4\1\0\34\4\3\0\6\4\1\0\1\4"+
    "\5\112\1\4\1\112\22\4\1\112\1\4\3\0\6\4"+
    "\1\0\1\4\1\134\3\135\1\136\1\4\1\135\22\4"+
    "\1\135\1\4\3\0\6\4\1\0\10\4\1\137\23\4"+
    "\3\0\6\4\1\0\10\4\1\140\23\4\3\0\4\4"+
    "\1\141\1\4\1\0\22\4\1\142\11\4\3\0\3\4"+
    "\1\112\2\4\1\0\34\4\3\0\6\4\1\0\1\4"+
    "\1\143\1\4\3\143\24\4\1\143\1\4\3\0\1\44"+
    "\1\4\1\45\1\46\1\113\1\4\1\114\1\51\5\4"+
    "\1\53\11\4\1\54\2\4\1\55\1\56\7\4\3\0"+
    "\1\44\1\4\1\45\1\46\1\113\1\4\1\114\1\51"+
    "\5\112\1\53\1\112\10\4\1\54\2\4\1\55\1\56"+
    "\5\4\1\112\1\4\3\0\1\44\1\4\1\45\1\46"+
    "\1\47\1\4\1\50\1\51\1\111\1\112\3\111\1\53"+
    "\1\112\10\4\1\54\2\4\1\55\1\56\2\4\1\57"+
    "\1\4\1\60\1\111\1\4\3\0\6\4\1\0\10\4"+
    "\1\144\12\4\1\145\10\4\3\0\4\4\1\146\1\4"+
    "\1\0\34\4\3\0\6\4\1\0\21\4\1\147\12\4"+
    "\3\0\5\4\1\150\1\0\34\4\3\0\6\4\1\0"+
    "\1\75\33\4\3\0\6\4\1\0\20\4\1\151\13\4"+
    "\3\0\43\73\1\0\1\152\1\0\3\4\1\153\2\4"+
    "\1\0\34\4\3\0\6\4\1\0\23\4\1\103\10\4"+
    "\3\0\5\4\1\154\1\0\34\4\3\0\1\155\2\0"+
    "\1\156\1\0\1\157\1\77\1\160\1\161\1\162\1\163"+
    "\1\164\1\163\1\0\1\162\2\0\1\165\1\0\1\166"+
    "\1\167\2\0\1\170\1\171\10\0\1\162\4\0\5\4"+
    "\1\172\1\0\23\4\1\103\10\4\11\0\1\101\1\0"+
    "\1\173\1\174\1\175\1\174\1\176\1\0\1\174\22\0"+
    "\1\174\4\0\2\4\1\177\3\4\1\0\34\4\3\0"+
    "\4\4\1\200\1\4\1\0\34\4\3\0\6\4\1\0"+
    "\12\4\1\201\21\4\3\0\6\4\1\0\20\4\1\202"+
    "\13\4\3\0\1\4\1\203\4\4\1\0\34\4\3\0"+
    "\6\4\1\0\20\4\1\75\13\4\3\0\5\4\1\204"+
    "\1\0\34\4\3\0\6\4\1\0\22\4\1\120\4\4"+
    "\1\121\4\4\3\0\1\122\1\0\1\123\1\124\1\205"+
    "\1\0\1\114\1\126\17\0\1\127\2\0\1\130\1\131"+
    "\12\0\6\4\1\0\25\4\1\206\6\4\3\0\5\4"+
    "\1\207\1\0\34\4\3\0\1\4\1\210\4\4\1\0"+
    "\14\4\1\211\17\4\3\0\6\4\1\0\17\4\1\212"+
    "\14\4\3\0\1\4\1\213\4\4\1\0\34\4\22\0"+
    "\1\214\63\0\1\215\14\0\1\216\44\0\1\217\25\0"+
    "\1\220\4\0\1\221\11\0\1\222\62\0\1\223\45\0"+
    "\1\224\32\0\1\225\24\0\1\226\17\0\1\217\42\0"+
    "\6\4\1\0\30\4\1\227\3\4\3\0\6\4\1\0"+
    "\2\4\4\135\1\4\1\135\22\4\1\135\1\4\3\0"+
    "\6\4\1\0\6\4\1\230\25\4\3\0\6\4\1\0"+
    "\1\4\1\135\1\4\1\135\1\4\1\135\1\230\25\4"+
    "\3\0\6\4\1\0\27\4\1\231\4\4\3\0\6\4"+
    "\1\0\26\4\1\227\5\4\3\0\6\4\1\0\1\232"+
    "\33\4\3\0\6\4\1\0\1\233\20\4\1\234\12\4"+
    "\3\0\6\4\1\0\1\4\5\235\1\4\1\235\22\4"+
    "\1\235\1\4\3\0\6\4\1\0\13\4\1\201\20\4"+
    "\3\0\6\4\1\0\1\236\33\4\3\0\1\4\1\201"+
    "\4\4\1\0\34\4\3\0\6\4\1\0\21\4\1\237"+
    "\12\4\3\0\6\4\1\0\22\4\1\240\11\4\3\0"+
    "\5\4\1\202\1\0\34\4\3\0\6\4\1\241\34\4"+
    "\3\0\6\4\1\0\1\242\33\4\4\0\1\243\1\244"+
    "\45\0\1\245\45\0\1\246\1\247\20\0\1\250\4\0"+
    "\1\251\33\0\1\252\37\0\4\162\1\0\1\162\22\0"+
    "\1\162\4\0\1\122\1\0\1\123\1\124\1\205\1\0"+
    "\1\114\1\126\5\0\1\253\11\0\1\127\2\0\1\130"+
    "\1\131\12\0\1\122\1\0\1\123\1\124\1\205\1\0"+
    "\1\114\1\126\5\162\1\253\1\162\10\0\1\127\2\0"+
    "\1\130\1\131\5\0\1\162\4\0\1\122\1\0\1\123"+
    "\1\124\1\205\1\0\1\114\1\126\1\162\3\0\1\162"+
    "\1\253\11\0\1\127\2\0\1\130\1\131\31\0\1\254"+
    "\45\0\1\255\32\0\1\256\45\0\1\257\24\0\1\260"+
    "\20\0\1\261\41\0\6\4\1\0\15\4\1\201\16\4"+
    "\13\0\1\262\1\263\3\262\1\0\1\263\21\0\1\264"+
    "\1\262\10\0\1\132\1\0\1\265\1\0\1\266\1\0"+
    "\3\266\21\0\1\132\1\0\1\267\1\266\10\0\1\132"+
    "\1\0\1\265\1\0\1\262\1\0\3\262\21\0\1\132"+
    "\1\0\1\267\1\266\10\0\1\132\1\0\1\265\1\0"+
    "\1\270\1\263\1\270\1\262\1\270\1\0\1\263\17\0"+
    "\1\132\1\0\1\267\1\262\4\0\1\4\1\271\4\4"+
    "\1\0\34\4\3\0\6\4\1\0\14\4\1\201\17\4"+
    "\3\0\6\4\1\272\34\4\3\0\6\4\1\273\34\4"+
    "\34\0\1\220\4\0\1\221\7\0\1\4\1\274\4\4"+
    "\1\275\1\4\2\276\1\277\1\276\1\300\1\4\1\276"+
    "\22\4\1\276\1\4\3\0\2\4\1\301\3\4\1\275"+
    "\1\4\2\276\1\277\1\276\1\300\1\4\1\276\22\4"+
    "\1\276\1\4\3\0\6\4\1\275\1\4\2\276\1\277"+
    "\1\276\1\300\1\4\1\276\16\4\1\302\3\4\1\276"+
    "\1\4\3\0\6\4\1\275\1\4\2\276\1\277\1\276"+
    "\1\300\1\4\1\276\22\4\1\276\1\4\3\0\6\4"+
    "\1\275\1\4\2\276\1\277\1\276\1\300\1\4\1\276"+
    "\12\4\1\303\7\4\1\276\1\4\3\0\6\4\1\275"+
    "\1\4\2\276\1\277\1\276\1\300\1\4\1\276\6\4"+
    "\1\304\13\4\1\276\1\4\37\0\1\305\16\0\1\306"+
    "\41\0\1\307\21\0\1\275\50\0\1\310\20\0\1\311"+
    "\103\0\1\312\44\0\1\313\44\0\1\312\17\0\1\314"+
    "\45\0\1\315\20\0\1\316\15\0\6\4\1\275\1\4"+
    "\2\276\1\277\1\276\1\300\1\4\1\276\1\317\21\4"+
    "\1\276\1\4\3\0\6\4\1\0\1\4\2\276\1\277"+
    "\1\276\1\300\1\4\1\276\22\4\1\276\1\4\3\0"+
    "\5\4\1\320\1\275\1\4\2\276\1\277\1\276\1\300"+
    "\1\4\1\276\22\4\1\276\1\4\3\0\6\4\1\275"+
    "\1\4\2\276\1\277\1\276\1\300\1\4\1\276\12\4"+
    "\1\321\7\4\1\276\1\4\3\0\6\4\1\275\1\4"+
    "\2\276\1\277\1\276\1\300\1\4\1\276\1\211\21\4"+
    "\1\276\1\4\3\0\6\4\1\275\1\4\2\276\1\277"+
    "\1\276\1\300\1\4\1\276\4\4\1\211\15\4\1\276"+
    "\1\4\3\0\4\4\1\57\1\4\1\265\27\4\1\57"+
    "\4\4\3\0\6\4\1\0\10\4\1\322\23\4\3\0"+
    "\2\4\1\323\3\4\1\0\34\4\3\0\1\4\1\324"+
    "\4\4\1\0\34\4\3\0\1\155\2\0\1\156\1\0"+
    "\1\157\1\241\1\160\1\325\1\326\1\327\1\330\1\331"+
    "\1\0\1\326\2\0\1\165\1\0\1\166\1\167\2\0"+
    "\1\170\1\171\10\0\1\326\4\0\6\4\1\0\16\4"+
    "\1\332\15\4\30\0\1\333\21\0\1\334\53\0\1\335"+
    "\41\0\1\336\26\0\1\337\14\0\1\340\71\0\1\341"+
    "\3\0\1\342\33\0\1\343\46\0\1\344\35\0\1\345"+
    "\3\346\1\347\1\0\1\346\22\0\1\346\23\0\1\350"+
    "\12\0\1\351\17\0\1\352\71\0\1\353\22\0\1\354"+
    "\47\0\1\333\65\0\1\355\26\0\1\356\1\217\3\356"+
    "\1\0\1\217\21\0\1\264\1\356\14\0\1\266\1\0"+
    "\3\266\23\0\1\264\1\266\14\0\1\266\1\0\3\266"+
    "\24\0\1\266\10\0\1\132\1\0\1\265\27\0\1\132"+
    "\17\0\5\217\1\0\1\217\22\0\1\217\14\0\1\357"+
    "\1\0\3\357\24\0\1\357\10\0\1\132\1\0\1\265"+
    "\1\0\1\356\1\217\3\356\1\0\1\217\17\0\1\132"+
    "\1\0\1\267\1\356\4\0\1\4\1\360\4\4\1\0"+
    "\34\4\3\0\1\361\2\0\1\362\1\0\1\363\1\272"+
    "\12\0\1\364\5\0\1\170\16\0\1\155\2\0\1\156"+
    "\1\0\1\363\1\273\12\0\1\165\1\0\1\166\3\0"+
    "\1\170\16\0\6\4\1\0\22\4\1\321\11\4\11\0"+
    "\1\275\1\0\2\365\1\366\1\365\1\367\1\0\1\365"+
    "\22\0\1\365\4\0\6\4\1\0\1\4\5\201\1\4"+
    "\1\201\22\4\1\201\1\4\3\0\6\4\1\0\1\4"+
    "\1\370\4\201\1\4\1\201\22\4\1\201\1\4\3\0"+
    "\6\4\1\0\1\4\5\201\1\4\1\370\22\4\1\201"+
    "\1\4\3\0\6\4\1\0\25\4\1\371\6\4\3\0"+
    "\6\4\1\0\15\4\1\211\16\4\3\0\6\4\1\0"+
    "\20\4\1\372\13\4\3\0\6\4\1\0\21\4\1\211"+
    "\12\4\4\0\1\373\4\0\1\275\1\0\2\365\1\366"+
    "\1\365\1\367\1\0\1\365\22\0\1\365\6\0\1\374"+
    "\3\0\1\275\1\0\2\365\1\366\1\365\1\367\1\0"+
    "\1\365\22\0\1\365\12\0\1\275\1\0\2\365\1\366"+
    "\1\365\1\367\1\0\1\365\16\0\1\375\3\0\1\365"+
    "\12\0\1\275\1\0\2\365\1\366\1\365\1\367\1\0"+
    "\1\365\12\0\1\376\7\0\1\365\12\0\1\275\1\0"+
    "\2\365\1\366\1\365\1\367\1\0\1\365\6\0\1\377"+
    "\13\0\1\365\12\0\1\275\1\0\2\365\1\366\1\365"+
    "\1\367\1\0\1\365\1\u0100\21\0\1\365\11\0\1\u0101"+
    "\1\275\1\0\2\365\1\366\1\365\1\367\1\0\1\365"+
    "\22\0\1\365\12\0\1\275\1\0\2\365\1\366\1\365"+
    "\1\367\1\0\1\365\12\0\1\u0102\7\0\1\365\12\0"+
    "\1\275\1\0\2\365\1\366\1\365\1\367\1\0\1\365"+
    "\1\275\21\0\1\365\12\0\1\275\1\0\2\365\1\366"+
    "\1\365\1\367\1\0\1\365\4\0\1\275\15\0\1\365"+
    "\4\0\3\4\1\301\2\4\1\0\34\4\3\0\6\4"+
    "\1\0\10\4\1\317\23\4\3\0\4\4\1\u0103\1\4"+
    "\1\0\34\4\3\0\6\4\1\0\20\4\1\324\13\4"+
    "\3\0\6\4\1\0\12\4\1\u0104\21\4\13\0\1\262"+
    "\1\u0105\3\u0106\1\0\1\u0105\21\0\1\264\1\u0106\4\0"+
    "\1\122\1\0\1\123\1\124\1\125\1\0\1\50\1\126"+
    "\1\266\1\0\3\266\1\253\11\0\1\127\2\0\1\130"+
    "\1\131\2\0\1\132\1\0\1\267\1\266\4\0\1\122"+
    "\1\0\1\123\1\124\1\125\1\0\1\50\1\126\1\u0106"+
    "\1\162\3\u0106\1\253\1\162\10\0\1\127\2\0\1\130"+
    "\1\131\2\0\1\132\1\0\1\267\1\u0107\4\0\1\122"+
    "\1\0\1\123\1\124\1\125\1\0\1\50\1\126\1\u0107"+
    "\1\0\2\266\1\u0107\1\253\11\0\1\127\2\0\1\130"+
    "\1\131\2\0\1\132\1\0\1\267\1\266\4\0\1\122"+
    "\1\0\1\123\1\124\1\125\1\0\1\50\1\126\1\u0108"+
    "\1\u0105\1\u0108\1\u0106\1\u0108\1\253\1\u0105\10\0\1\127"+
    "\2\0\1\130\1\131\2\0\1\132\1\0\1\267\1\u0106"+
    "\4\0\6\4\1\0\17\4\1\u0109\14\4\35\0\1\337"+
    "\20\0\1\u010a\45\0\1\u010b\24\0\1\337\15\0\1\u010c"+
    "\47\0\1\u010d\62\0\1\u010e\53\0\1\u010f\17\0\1\u0110"+
    "\73\0\1\333\23\0\1\u0111\51\0\4\346\1\0\1\346"+
    "\22\0\1\346\21\0\1\u0112\40\0\1\346\1\0\1\346"+
    "\1\0\1\346\1\u0112\52\0\1\u010e\32\0\1\u0113\37\0"+
    "\1\u010e\74\0\1\u0114\46\0\1\u0115\21\0\1\u010f\50\0"+
    "\5\u0116\1\0\1\u0116\22\0\1\u0116\4\0\2\4\1\u0117"+
    "\3\4\1\0\34\4\4\0\1\243\46\0\1\260\67\0"+
    "\1\u0118\4\0\1\251\33\0\1\u0119\36\0\5\u010e\1\0"+
    "\1\u010e\22\0\1\u010e\14\0\1\u011a\4\u010e\1\0\1\u010e"+
    "\22\0\1\u010e\14\0\5\u010e\1\0\1\u011a\22\0\1\u010e"+
    "\4\0\6\4\1\0\1\4\5\276\1\4\1\276\22\4"+
    "\1\276\1\4\3\0\6\4\1\0\10\4\1\u011b\23\4"+
    "\3\0\5\4\1\211\1\0\34\4\34\0\1\u0102\50\0"+
    "\1\u011c\35\0\1\275\50\0\1\u011d\46\0\1\275\20\0"+
    "\1\374\61\0\1\u0100\32\0\1\u011e\41\0\1\4\1\u011f"+
    "\4\4\1\0\34\4\3\0\6\4\1\0\10\4\1\u0120"+
    "\23\4\3\0\1\122\1\0\1\123\1\124\1\205\1\0"+
    "\1\114\1\126\1\266\1\0\3\266\1\253\11\0\1\127"+
    "\2\0\1\130\1\131\4\0\1\264\1\266\4\0\1\122"+
    "\1\0\1\123\1\124\1\205\1\0\1\114\1\126\1\356"+
    "\1\217\3\356\1\253\1\217\10\0\1\127\2\0\1\130"+
    "\1\131\4\0\1\264\1\356\4\0\1\122\1\0\1\123"+
    "\1\124\1\205\1\0\1\114\1\126\5\217\1\253\1\217"+
    "\10\0\1\127\2\0\1\130\1\131\5\0\1\217\4\0"+
    "\1\122\1\0\1\123\1\124\1\125\1\0\1\50\1\126"+
    "\1\356\1\217\3\356\1\253\1\217\10\0\1\127\2\0"+
    "\1\130\1\131\2\0\1\132\1\0\1\267\1\356\4\0"+
    "\6\4\1\0\15\4\1\u0121\16\4\12\0\1\u0122\62\0"+
    "\1\u010e\22\0\1\u0123\67\0\1\u010e\30\0\1\272\45\0"+
    "\1\273\47\0\2\365\1\366\1\365\1\367\1\0\1\365"+
    "\22\0\1\365\23\0\1\u0124\30\0\1\u0125\44\0\1\u0126"+
    "\75\0\1\342\46\0\1\351\23\0\5\365\1\0\1\365"+
    "\22\0\1\365\4\0\1\4\1\211\4\4\1\0\34\4"+
    "\22\0\1\u0127\33\0\1\275\41\0\1\u0128\44\0\6\4"+
    "\1\0\14\4\1\211\17\4\3\0\6\4\1\0\10\4"+
    "\1\u0129\23\4\3\0\5\4\1\201\1\0\34\4\30\0"+
    "\1\u012a\21\0\1\u012b\73\0\1\u0126\37\0\1\u012c\25\0"+
    "\1\275\67\0\1\275\22\0\6\4\1\0\1\201\33\4"+
    "\31\0\1\u012d\21\0\1\u012e\62\0\1\u012f\52\0\1\u0130"+
    "\40\0\1\u0131\33\0\1\u010e\47\0\1\u010e\35\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11020];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\45\1\1\0\22\1\1\0\3\1\1\0"+
    "\1\1\1\0\12\1\1\0\5\1\11\0\17\1\1\11"+
    "\2\1\15\0\1\1\4\0\6\1\1\0\6\1\3\0"+
    "\1\11\7\0\12\1\1\0\1\1\26\0\1\1\2\0"+
    "\31\1\5\0\2\1\1\0\1\1\2\0\1\1\1\0"+
    "\2\1\2\0\2\1\1\0\1\1\2\0\1\1\1\0"+
    "\1\1\1\0\1\1\7\0\3\1\10\0\2\1\4\0"+
    "\1\1\4\0\1\11\7\0\2\1\2\0\2\1\3\0"+
    "\3\1\7\0\1\1\10\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[305];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  String name;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 156) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 2: 
          { return new WordToken(yytext());
          }
        case 7: break;
        case 3: 
          { return new TagToken(yytext());
          }
        case 8: break;
        case 5: 
          { String contents = yytext();
	String[] split = contents.split("\\s+", 2);

	// Handles the optional qualifier
	if (split.length == 2 && (split[0].equalsIgnoreCase("at") || split[0].equalsIgnoreCase("from"))) {
		return new TimeToken(split[1].trim());
	}
	else {
		return new TimeToken(yytext());
	}
          }
        case 9: break;
        case 6: 
          { String contents = yytext();
    return new WordToken(contents.substring(1, contents.length()-1));
          }
        case 10: break;
        case 4: 
          { String contents = yytext();
	String[] split = contents.split("\\s+", 2);

	// Handles the optional qualifier
	if (split.length == 2 && (split[0].equalsIgnoreCase("on") || split[0].equalsIgnoreCase("from"))) {
		return new DateToken(split[1].trim());
	}
	else {
		return new DateToken(yytext());
	}
          }
        case 11: break;
        case 1: 
          { 
          }
        case 12: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
