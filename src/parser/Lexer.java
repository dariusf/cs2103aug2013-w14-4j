/* The following code was generated by JFlex 1.4.3 on 10/15/13 6:54 PM */


package parser;

/**
   This is a lexical analyser generated by JFlex 1.4.3.
   We use it to tokenize input strings.

   The specification for the lexer can be found in the
   root folder of the project.
*/

@SuppressWarnings("unused")


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 10/15/13 6:54 PM from the specification file
 * <tt>lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\0\25\0\1\7\2\0\1\36\3\0\1\37\5\0\1\16"+
    "\1\0\1\40\1\11\1\15\1\13\1\14\2\33\3\12\1\17\1\32"+
    "\6\0\1\5\2\35\1\30\1\23\1\1\1\35\1\20\1\21\2\35"+
    "\1\25\1\4\1\10\1\3\1\34\1\35\1\2\1\22\1\6\1\26"+
    "\1\35\1\27\1\24\1\31\1\35\6\0\1\5\2\35\1\30\1\23"+
    "\1\1\1\35\1\20\1\21\2\35\1\25\1\4\1\10\1\3\1\34"+
    "\1\35\1\2\1\22\1\6\1\26\1\35\1\27\1\24\1\31\1\35"+
    "\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\17\2\2\1\11\2\1\0\1\2\3\0"+
    "\4\2\1\3\1\0\1\2\1\4\2\0\1\2\2\4"+
    "\1\2\1\0\1\5\2\0\2\4\1\0\2\4\3\2"+
    "\17\0\2\2\1\5\1\0\1\5\2\2\1\0\1\2"+
    "\15\0\2\2\5\0\2\4\1\0\2\4\1\0\2\4"+
    "\1\0\2\4\12\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[124];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\41\0\102\0\143\0\204\0\245\0\306\0\347"+
    "\0\u0108\0\u0129\0\u014a\0\u016b\0\u018c\0\u01ad\0\u01ce\0\u01ef"+
    "\0\u0210\0\u0231\0\u0252\0\u0273\0\u0294\0\u02b5\0\u02d6\0\u02f7"+
    "\0\u0318\0\u0339\0\u035a\0\u037b\0\u039c\0\u03bd\0\u03de\0\u03ff"+
    "\0\u0420\0\u0441\0\u0462\0\u0483\0\u04a4\0\u0231\0\u04c5\0\u04e6"+
    "\0\u0507\0\u0528\0\u0549\0\u056a\0\u058b\0\u05ac\0\u05cd\0\u05ee"+
    "\0\143\0\u060f\0\u0630\0\u0651\0\u0672\0\u0693\0\u06b4\0\u06d5"+
    "\0\41\0\u06f6\0\u0717\0\u0738\0\u0759\0\u077a\0\u079b\0\u07bc"+
    "\0\u07dd\0\u07fe\0\u081f\0\u0840\0\u0861\0\u0882\0\u08a3\0\u08c4"+
    "\0\u08e5\0\u0906\0\u0927\0\u05ac\0\41\0\u0948\0\u03de\0\u0969"+
    "\0\u098a\0\u09ab\0\u09cc\0\u09ed\0\u0a0e\0\u0a2f\0\u0a50\0\u0a71"+
    "\0\u0a92\0\u0ab3\0\u0ad4\0\u0af5\0\u0b16\0\u0b37\0\u0b58\0\u0b79"+
    "\0\u0507\0\u0b9a\0\u0bbb\0\u0bdc\0\u0bfd\0\u0c1e\0\u0c3f\0\143"+
    "\0\u0c60\0\u0c81\0\u0ca2\0\u0cc3\0\u0ce4\0\u0d05\0\u0d26\0\u0d47"+
    "\0\41\0\u0d68\0\u0d89\0\u0daa\0\u0dcb\0\u0cc3\0\u0dec\0\u0e0d"+
    "\0\u0e2e\0\u0e4f\0\u0c60\0\u0e70";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[124];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\2"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\2\1\13"+
    "\2\4\1\17\2\4\1\20\1\4\1\21\2\4\1\2"+
    "\1\13\2\4\1\22\1\23\1\2\42\0\1\4\1\24"+
    "\4\4\1\0\6\4\1\0\13\4\1\0\3\4\4\0"+
    "\6\4\1\0\6\4\1\0\13\4\1\0\3\4\4\0"+
    "\6\4\1\0\1\25\5\4\1\0\13\4\1\0\3\4"+
    "\4\0\2\4\1\26\3\4\1\0\6\4\1\0\13\4"+
    "\1\0\3\4\4\0\5\4\1\27\1\0\6\4\1\0"+
    "\13\4\1\0\3\4\4\0\6\4\1\0\6\4\1\0"+
    "\1\4\1\30\5\4\1\31\3\4\1\0\3\4\4\0"+
    "\6\4\1\0\6\4\1\0\4\4\1\32\6\4\1\0"+
    "\3\4\4\0\6\4\1\0\1\4\1\33\4\34\1\0"+
    "\1\34\12\4\1\35\1\34\2\4\4\0\4\4\1\36"+
    "\1\4\1\37\6\4\1\40\13\4\1\41\1\4\1\36"+
    "\1\4\2\0\1\40\1\0\4\4\1\36\1\4\1\37"+
    "\1\4\1\34\1\42\3\34\1\40\1\42\12\4\1\41"+
    "\1\42\1\36\1\4\2\0\1\40\1\0\4\4\1\36"+
    "\1\4\1\37\1\4\1\42\3\4\1\42\1\40\13\4"+
    "\1\41\1\4\1\36\1\4\2\0\1\40\1\0\4\4"+
    "\1\36\1\4\1\37\1\4\1\13\1\34\1\13\1\34"+
    "\1\13\1\40\1\34\12\4\1\41\1\34\1\36\1\4"+
    "\2\0\1\40\1\0\4\4\1\43\1\4\1\0\6\4"+
    "\1\0\7\4\1\26\3\4\1\0\3\4\4\0\4\4"+
    "\1\44\1\4\1\0\6\4\1\0\13\4\1\0\3\4"+
    "\4\0\6\4\1\0\6\4\1\0\4\4\1\45\6\4"+
    "\1\0\3\4\4\0\6\46\1\0\6\46\1\0\13\46"+
    "\1\0\3\46\4\0\15\47\1\0\17\47\2\0\1\47"+
    "\1\0\2\4\1\50\3\4\1\0\6\4\1\0\2\4"+
    "\1\51\10\4\1\0\3\4\4\0\6\4\1\52\6\4"+
    "\1\0\13\4\1\0\3\4\4\0\6\4\1\0\1\51"+
    "\5\4\1\0\13\4\1\0\3\4\4\0\6\4\1\53"+
    "\6\4\1\0\13\4\1\0\3\4\4\0\6\4\1\0"+
    "\6\4\1\0\2\4\1\54\4\4\1\55\3\4\1\0"+
    "\3\4\4\0\6\4\1\0\6\4\1\0\4\4\1\56"+
    "\6\4\1\0\3\4\4\0\6\4\1\0\6\4\1\0"+
    "\5\4\1\57\5\4\1\0\3\4\4\0\6\4\1\0"+
    "\6\4\1\0\13\4\1\35\3\4\4\0\6\4\1\0"+
    "\6\4\1\40\13\4\1\35\3\4\2\0\1\40\11\0"+
    "\1\60\1\0\3\60\15\0\1\60\6\0\3\4\1\61"+
    "\2\4\1\0\6\4\1\0\13\4\1\0\3\4\10\0"+
    "\1\62\1\0\1\37\24\0\1\62\15\0\1\63\3\64"+
    "\1\65\1\0\1\64\13\0\1\64\16\0\1\66\1\0"+
    "\3\66\15\0\1\66\6\0\6\4\1\0\6\4\1\40"+
    "\13\4\1\0\3\4\2\0\1\40\1\0\5\4\1\67"+
    "\1\0\6\4\1\0\13\4\1\0\3\4\4\0\6\4"+
    "\1\0\6\4\1\0\3\4\1\57\7\4\1\0\3\4"+
    "\4\0\6\4\1\0\6\4\1\0\11\4\1\70\1\4"+
    "\1\0\3\4\4\0\15\47\1\0\17\47\1\0\1\71"+
    "\1\47\1\0\3\4\1\72\2\4\1\0\6\4\1\0"+
    "\13\4\1\0\3\4\4\0\6\4\1\0\6\4\1\0"+
    "\11\4\1\73\1\4\1\0\3\4\4\0\1\74\2\0"+
    "\1\75\1\0\1\76\1\52\1\77\1\100\1\101\1\102"+
    "\1\103\1\102\1\0\1\101\2\0\1\104\2\0\1\105"+
    "\1\0\1\106\3\0\1\101\14\0\1\53\1\0\1\107"+
    "\1\110\1\111\1\110\1\112\1\0\1\110\13\0\1\110"+
    "\6\0\6\4\1\0\6\4\1\0\3\4\1\113\7\4"+
    "\1\0\3\4\4\0\1\4\1\114\4\4\1\0\6\4"+
    "\1\0\13\4\1\0\3\4\4\0\6\4\1\0\6\4"+
    "\1\0\3\4\1\51\7\4\1\0\3\4\4\0\5\4"+
    "\1\113\1\0\6\4\1\0\13\4\1\0\3\4\14\0"+
    "\5\115\1\0\1\115\13\0\1\115\11\0\1\115\46\0"+
    "\4\64\1\0\1\64\13\0\1\64\23\0\1\116\21\0"+
    "\1\116\11\0\1\64\1\0\1\64\1\0\1\64\1\116"+
    "\21\0\1\116\11\0\5\117\1\0\1\117\13\0\1\117"+
    "\6\0\6\4\1\0\6\4\1\0\7\4\1\120\3\4"+
    "\1\0\3\4\4\0\6\4\1\0\1\121\5\4\1\0"+
    "\13\4\1\0\3\4\4\0\6\4\1\122\6\4\1\0"+
    "\13\4\1\0\3\4\4\0\4\4\1\123\1\4\1\0"+
    "\6\4\1\0\13\4\1\0\3\4\5\0\1\124\41\0"+
    "\1\125\55\0\1\126\5\0\1\127\35\0\1\130\27\0"+
    "\4\101\1\0\1\101\13\0\1\101\23\0\1\40\21\0"+
    "\1\40\11\0\5\101\1\40\1\101\13\0\1\101\4\0"+
    "\1\40\11\0\1\101\3\0\1\101\1\40\21\0\1\40"+
    "\5\0\1\131\20\0\1\125\17\0\1\132\56\0\1\133"+
    "\26\0\5\134\1\0\1\134\12\0\1\35\1\134\12\0"+
    "\1\62\1\0\1\37\22\0\1\41\1\0\1\62\11\0"+
    "\1\62\1\0\1\37\1\0\1\134\1\0\3\134\14\0"+
    "\1\41\1\0\1\62\11\0\1\62\1\0\1\37\1\0"+
    "\1\110\1\134\1\110\1\134\1\110\1\0\1\134\12\0"+
    "\1\41\1\134\1\62\5\0\6\4\1\135\6\4\1\0"+
    "\13\4\1\0\3\4\14\0\2\136\1\137\1\136\1\140"+
    "\1\0\1\136\13\0\1\136\6\0\1\4\1\141\4\4"+
    "\1\0\6\4\1\0\13\4\1\0\3\4\4\0\6\4"+
    "\1\0\6\4\1\0\4\4\1\142\6\4\1\0\3\4"+
    "\4\0\1\74\2\0\1\75\1\0\1\76\1\122\1\77"+
    "\1\143\1\144\1\145\1\146\1\147\1\0\1\144\2\0"+
    "\1\104\2\0\1\105\1\0\1\106\3\0\1\144\6\0"+
    "\6\4\1\0\6\4\1\0\12\4\1\150\1\0\3\4"+
    "\24\0\1\151\27\0\1\151\51\0\1\152\4\0\1\153"+
    "\35\0\1\154\41\0\1\155\22\0\1\156\54\0\1\155"+
    "\46\0\1\157\42\0\1\35\7\0\1\74\2\0\1\75"+
    "\1\0\1\160\1\135\12\0\1\104\4\0\1\106\22\0"+
    "\5\161\1\0\1\161\13\0\1\161\16\0\1\162\4\161"+
    "\1\0\1\161\13\0\1\161\16\0\5\161\1\0\1\162"+
    "\13\0\1\161\6\0\6\4\1\0\6\4\1\0\3\4"+
    "\1\141\7\4\1\0\3\4\14\0\1\134\4\163\1\0"+
    "\1\163\12\0\1\35\1\163\12\0\1\62\1\0\1\37"+
    "\6\0\1\40\13\0\1\41\1\0\1\62\3\0\1\40"+
    "\5\0\1\62\1\0\1\37\1\0\1\163\1\101\3\163"+
    "\1\40\1\101\12\0\1\41\1\101\1\62\3\0\1\40"+
    "\5\0\1\62\1\0\1\37\1\0\1\101\3\0\1\101"+
    "\1\40\13\0\1\41\1\0\1\62\3\0\1\40\5\0"+
    "\1\62\1\0\1\37\1\0\1\144\1\163\1\144\1\163"+
    "\1\144\1\40\1\163\12\0\1\41\1\163\1\62\3\0"+
    "\1\40\30\0\1\164\32\0\1\165\20\0\1\166\60\0"+
    "\1\151\24\0\1\165\60\0\1\167\22\0\1\170\50\0"+
    "\1\171\5\0\1\127\23\0\5\136\1\0\1\136\13\0"+
    "\1\136\23\0\1\40\13\0\1\35\5\0\1\40\5\0"+
    "\1\172\42\0\1\135\33\0\1\173\61\0\1\174\43\0"+
    "\1\153\43\0\1\161\31\0\1\173\16\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3729];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\32\1\1\0\1\1\3\0\5\1\1\0"+
    "\2\1\2\0\4\1\1\0\1\1\2\0\2\1\1\0"+
    "\2\1\1\11\2\1\17\0\2\1\1\11\1\0\3\1"+
    "\1\0\1\1\15\0\2\1\5\0\2\1\1\0\2\1"+
    "\1\0\2\1\1\0\1\11\1\1\12\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[124];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  String name;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 142) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 2: 
          { return new WordToken(yytext());
          }
        case 6: break;
        case 3: 
          { return new TagToken(yytext());
          }
        case 7: break;
        case 5: 
          { String contents = yytext();
	String[] split = contents.split("\\s+", 2);

	// Handles the optional qualifier
	if (split.length == 2 && (split[0].equalsIgnoreCase("at") || split[0].equalsIgnoreCase("from"))) {
		return new TimeToken(split[1].trim());
	}
	else {
		return new TimeToken(yytext());
	}
          }
        case 8: break;
        case 4: 
          { String contents = yytext();
	String[] split = contents.split("\\s+", 2);

	// Handles the optional qualifier
	if (split.length == 2 && (split[0].equalsIgnoreCase("on") || split[0].equalsIgnoreCase("from"))) {
		return new DateToken(split[1].trim());
	}
	else {
		return new DateToken(yytext());
	}
          }
        case 9: break;
        case 1: 
          { 
          }
        case 10: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
