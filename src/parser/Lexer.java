/* The following code was generated by JFlex 1.4.3 on 11/7/13 9:50 PM */


package parser;

/**
   This is a lexical analyser generated by JFlex 1.4.3.
   We use it to tokenize input strings.

   The specification for the lexer can be found in the
   root folder of the project.
*/

@SuppressWarnings("unused")


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 11/7/13 9:50 PM from the specification file
 * <tt>lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\0\25\0\1\7\1\0\1\46\1\45\3\0\1\43\5\0"+
    "\1\16\1\41\1\16\1\11\1\15\1\13\1\14\2\42\3\12\1\17"+
    "\1\44\6\0\1\5\1\35\1\36\1\33\1\20\1\1\1\27\1\25"+
    "\1\26\1\34\1\23\1\31\1\4\1\10\1\3\1\37\1\43\1\2"+
    "\1\30\1\6\1\32\1\40\1\22\1\21\1\24\1\43\6\0\1\5"+
    "\1\35\1\36\1\33\1\20\1\1\1\27\1\25\1\26\1\34\1\23"+
    "\1\31\1\4\1\10\1\3\1\37\1\43\1\2\1\30\1\6\1\32"+
    "\1\40\1\22\1\21\1\24\1\43\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\23\2\2\1\17\2\1\0\5\2\1\0"+
    "\7\2\1\0\14\2\1\3\1\0\1\2\1\4\1\0"+
    "\3\2\1\0\3\2\1\4\1\2\2\4\2\2\2\5"+
    "\1\2\2\0\5\2\11\0\2\2\2\4\4\2\1\0"+
    "\1\2\1\4\2\2\1\4\2\2\1\6\1\2\16\0"+
    "\3\2\10\0\3\2\1\4\3\2\1\0\1\5\6\4"+
    "\12\0\1\4\1\2\4\4\2\5\5\2\17\0\3\2"+
    "\11\0\2\2\2\0\1\2\1\4\7\2\12\4\7\2"+
    "\7\0\1\4\3\0\1\4\1\0\2\4\2\0\3\4"+
    "\2\0\1\4\2\0\3\2\4\0\1\5\2\2\10\0"+
    "\1\4\2\2\10\0\3\2\10\0\1\4\11\0\1\2"+
    "\3\0\1\2\5\0\1\4\1\2\3\0\3\2\12\0"+
    "\1\4\4\0\2\2\16\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[364];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\47\0\116\0\165\0\234\0\303\0\352\0\u0111"+
    "\0\u0138\0\u015f\0\u0186\0\u01ad\0\u01d4\0\u01fb\0\u0222\0\u0249"+
    "\0\u0270\0\u0297\0\u02be\0\u02e5\0\u030c\0\u0333\0\u035a\0\u0381"+
    "\0\u03a8\0\u03cf\0\u03f6\0\u041d\0\u0444\0\u046b\0\u0492\0\u04b9"+
    "\0\u04e0\0\u0507\0\u052e\0\u0555\0\u057c\0\u05a3\0\u05ca\0\u05f1"+
    "\0\u0618\0\u063f\0\u0666\0\u068d\0\u06b4\0\u06db\0\u0702\0\u0729"+
    "\0\u0750\0\u0777\0\u079e\0\u07c5\0\u07ec\0\u0813\0\u083a\0\u0861"+
    "\0\u0888\0\u08af\0\u08d6\0\u08fd\0\u0924\0\u094b\0\u0972\0\u0999"+
    "\0\u09c0\0\u0333\0\u09e7\0\u0a0e\0\u0a35\0\u0a5c\0\u0a83\0\u0aaa"+
    "\0\u0ad1\0\u0af8\0\u0b1f\0\u0b46\0\u0b6d\0\u0b94\0\u0bbb\0\u0be2"+
    "\0\u0c09\0\u0c30\0\u0c57\0\u0702\0\165\0\u0c7e\0\u0ca5\0\u0ccc"+
    "\0\u0cf3\0\u0d1a\0\u0d41\0\u0d68\0\u0d8f\0\u0db6\0\u0ddd\0\u0e04"+
    "\0\u0e2b\0\u0e52\0\u0e79\0\u0ea0\0\u0ec7\0\u0eee\0\u0f15\0\u0f3c"+
    "\0\u0f63\0\u0f8a\0\u0fb1\0\u0fd8\0\u0fff\0\u1026\0\u104d\0\u1074"+
    "\0\u109b\0\u10c2\0\u10e9\0\u1110\0\u1137\0\u115e\0\47\0\u1185"+
    "\0\u11ac\0\u11d3\0\u11fa\0\u1221\0\u1248\0\u126f\0\u1296\0\u12bd"+
    "\0\u12e4\0\u130b\0\u1332\0\u1359\0\u1380\0\u13a7\0\u13ce\0\u13f5"+
    "\0\u141c\0\u1443\0\u146a\0\u1491\0\u14b8\0\u14df\0\u1506\0\u152d"+
    "\0\u1554\0\u157b\0\u15a2\0\u15c9\0\165\0\u15f0\0\u0c09\0\u1617"+
    "\0\u163e\0\47\0\u1665\0\u168c\0\u16b3\0\u16da\0\u1701\0\u1728"+
    "\0\u174f\0\u1776\0\u179d\0\u17c4\0\u17eb\0\u1812\0\u1839\0\u1860"+
    "\0\u1887\0\u18ae\0\u18d5\0\u18fc\0\u1923\0\u194a\0\u1971\0\u1998"+
    "\0\u19bf\0\u19e6\0\u1a0d\0\u1a34\0\u1a5b\0\u1a82\0\u1aa9\0\u1ad0"+
    "\0\u1af7\0\u1b1e\0\u1b45\0\u1b6c\0\u1b93\0\u1bba\0\u1be1\0\u1c08"+
    "\0\u1c2f\0\u1c56\0\u1c7d\0\u1ca4\0\u1ccb\0\u1cf2\0\u1d19\0\u1d40"+
    "\0\u1d67\0\u1d8e\0\u1db5\0\u1ddc\0\u1e03\0\u1e2a\0\u1e51\0\u19bf"+
    "\0\u1e78\0\u1e9f\0\u1ec6\0\u1eed\0\u1f14\0\u1f3b\0\u1f62\0\u1f89"+
    "\0\u1fb0\0\u1fd7\0\u1ffe\0\u2025\0\u204c\0\u2073\0\u209a\0\u20c1"+
    "\0\u20e8\0\u210f\0\u2136\0\u215d\0\u2184\0\u21ab\0\u21d2\0\u21f9"+
    "\0\u2220\0\u2247\0\u226e\0\u2295\0\u22bc\0\u22e3\0\u0a35\0\u230a"+
    "\0\u2331\0\u2358\0\u237f\0\u23a6\0\u23cd\0\u23f4\0\u241b\0\u2442"+
    "\0\u2469\0\u2490\0\u24b7\0\u24de\0\u2505\0\u252c\0\u2553\0\u257a"+
    "\0\u25a1\0\u25c8\0\u25ef\0\u2616\0\u263d\0\u2664\0\u268b\0\u26b2"+
    "\0\u26d9\0\u2700\0\u2727\0\u274e\0\u2775\0\u279c\0\u27c3\0\u27ea"+
    "\0\u0ccc\0\u2811\0\u2838\0\u285f\0\u2886\0\u28ad\0\u28d4\0\u28fb"+
    "\0\u2922\0\u2949\0\u2970\0\u2997\0\u29be\0\u29e5\0\u2a0c\0\u2a33"+
    "\0\u2a5a\0\u2a81\0\u2aa8\0\u2acf\0\u2af6\0\u2b1d\0\u2b44\0\u2b6b"+
    "\0\u2b92\0\u2bb9\0\u2be0\0\u2c07\0\u2c2e\0\u2c55\0\u2c7c\0\u2ca3"+
    "\0\u2cca\0\47\0\u2cf1\0\u2553\0\u2d18\0\u2d3f\0\u2d66\0\u2d8d"+
    "\0\u2db4\0\u2ddb\0\u2e02\0\u2e29\0\u2e50\0\u2e77\0\u2e9e\0\u0b94"+
    "\0\u2ec5\0\u2eec\0\u2f13\0\u2f3a\0\u2f61\0\u2f88\0\u2faf\0\u2fd6"+
    "\0\u2ffd\0\u3024\0\u304b\0\u3072\0\u3099\0\u30c0\0\u30e7\0\u310e"+
    "\0\u3135\0\u2442\0\u315c\0\u3183\0\u31aa\0\u31d1\0\u31f8\0\u321f"+
    "\0\u3246\0\u326d\0\u3294\0\u32bb\0\u32e2\0\u3309\0\u3330\0\u3357"+
    "\0\u337e\0\u33a5\0\u33cc\0\u33f3\0\u341a\0\u3441\0\u24de\0\u3468"+
    "\0\u348f\0\u34b6\0\u34dd\0\u3504";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[364];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\2"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\4\1\13"+
    "\1\17\1\4\1\20\1\4\1\21\1\22\2\4\1\23"+
    "\1\24\4\4\1\25\2\4\1\2\1\13\2\4\1\26"+
    "\1\27\50\0\1\4\1\30\4\4\1\0\31\4\1\0"+
    "\3\4\3\0\6\4\1\0\31\4\1\0\3\4\3\0"+
    "\6\4\1\0\1\31\30\4\1\0\3\4\3\0\2\4"+
    "\1\32\3\4\1\0\16\4\1\33\12\4\1\0\3\4"+
    "\3\0\1\34\4\4\1\35\1\0\31\4\1\0\3\4"+
    "\3\0\2\4\1\36\1\37\2\4\1\0\15\4\1\40"+
    "\4\4\1\41\6\4\1\0\3\4\3\0\2\4\1\42"+
    "\3\4\1\0\10\4\1\43\20\4\1\0\3\4\3\0"+
    "\6\4\1\0\1\4\1\44\1\45\3\46\1\4\1\45"+
    "\21\4\1\47\1\46\1\4\1\50\3\0\1\51\1\4"+
    "\1\52\1\53\1\54\1\4\1\55\1\56\1\57\1\4"+
    "\3\57\1\60\11\4\1\61\2\4\1\62\1\63\2\4"+
    "\1\64\1\4\1\65\1\57\1\4\1\66\3\0\1\51"+
    "\1\4\1\52\1\53\1\54\1\4\1\55\1\56\1\46"+
    "\1\67\3\46\1\60\1\67\10\4\1\61\2\4\1\62"+
    "\1\63\2\4\1\64\1\4\1\65\1\70\1\4\1\66"+
    "\3\0\1\51\1\4\1\52\1\53\1\54\1\4\1\55"+
    "\1\56\1\70\1\4\2\57\1\70\1\60\11\4\1\61"+
    "\2\4\1\62\1\63\2\4\1\64\1\4\1\65\1\57"+
    "\1\4\1\66\3\0\1\51\1\4\1\52\1\53\1\54"+
    "\1\4\1\55\1\56\1\71\1\45\1\71\1\46\1\71"+
    "\1\60\1\45\10\4\1\61\2\4\1\62\1\63\2\4"+
    "\1\64\1\4\1\65\1\46\1\4\1\66\3\0\6\4"+
    "\1\0\30\4\1\72\1\0\3\4\3\0\6\4\1\0"+
    "\10\4\1\73\20\4\1\0\3\4\3\0\6\4\1\0"+
    "\10\4\1\74\20\4\1\0\3\4\3\0\4\4\1\75"+
    "\1\4\1\0\31\4\1\0\3\4\3\0\4\4\1\76"+
    "\1\4\1\0\22\4\1\77\6\4\1\0\3\4\3\0"+
    "\4\4\1\100\1\4\1\0\31\4\1\0\3\4\3\0"+
    "\6\4\1\0\15\4\1\101\13\4\1\0\3\4\3\0"+
    "\6\102\1\0\31\102\1\0\3\102\3\0\40\103\1\0"+
    "\3\103\3\0\2\4\1\104\3\4\1\0\16\4\1\105"+
    "\12\4\1\0\3\4\3\0\6\4\1\106\31\4\1\0"+
    "\3\4\3\0\1\4\1\107\4\4\1\0\1\105\30\4"+
    "\1\0\3\4\3\0\6\4\1\0\23\4\1\110\5\4"+
    "\1\0\3\4\3\0\5\4\1\111\1\0\31\4\1\0"+
    "\3\4\3\0\6\4\1\112\31\4\1\0\3\4\3\0"+
    "\3\4\1\113\2\4\1\0\1\114\22\4\1\115\5\4"+
    "\1\0\3\4\3\0\1\4\1\116\4\4\1\0\31\4"+
    "\1\0\3\4\3\0\6\4\1\0\16\4\1\117\3\4"+
    "\1\120\6\4\1\0\3\4\3\0\6\4\1\0\10\4"+
    "\1\121\20\4\1\0\3\4\3\0\2\4\1\122\3\4"+
    "\1\0\31\4\1\0\3\4\3\0\6\4\1\0\11\4"+
    "\1\123\17\4\1\0\3\4\3\0\6\4\1\0\1\4"+
    "\1\124\1\125\3\124\1\4\1\125\21\4\1\47\1\124"+
    "\1\4\1\50\3\0\1\51\1\4\1\52\1\53\1\126"+
    "\1\4\1\127\1\56\1\57\1\4\3\57\1\60\11\4"+
    "\1\61\2\4\1\62\1\63\4\4\1\47\1\57\1\4"+
    "\1\50\3\0\1\51\1\4\1\52\1\53\1\126\1\4"+
    "\1\127\1\56\1\124\1\125\3\124\1\60\1\125\10\4"+
    "\1\61\2\4\1\62\1\63\4\4\1\47\1\124\1\4"+
    "\1\50\13\0\1\130\1\0\3\130\24\0\1\130\5\0"+
    "\6\4\1\0\1\4\1\57\1\4\3\57\23\4\1\0"+
    "\1\57\2\4\3\0\6\4\1\0\10\4\1\131\20\4"+
    "\1\0\3\4\3\0\6\4\1\0\26\4\1\132\2\4"+
    "\1\0\3\4\3\0\4\4\1\133\1\4\1\0\31\4"+
    "\1\0\3\4\3\0\3\4\1\125\2\4\1\0\22\4"+
    "\1\134\4\4\1\135\1\4\1\0\3\4\3\0\1\136"+
    "\1\0\1\137\1\140\1\141\1\0\1\55\1\142\17\0"+
    "\1\143\2\0\1\144\1\145\2\0\1\146\10\0\2\4"+
    "\1\147\3\4\1\0\31\4\1\0\3\4\3\0\6\4"+
    "\1\0\1\4\5\125\1\4\1\125\21\4\1\0\1\125"+
    "\2\4\3\0\6\4\1\0\1\4\1\150\3\151\1\152"+
    "\1\4\1\151\21\4\1\0\1\151\2\4\3\0\6\4"+
    "\1\0\10\4\1\153\20\4\1\0\3\4\3\0\6\4"+
    "\1\0\10\4\1\154\20\4\1\0\3\4\3\0\4\4"+
    "\1\155\1\4\1\0\22\4\1\156\6\4\1\0\3\4"+
    "\3\0\3\4\1\125\2\4\1\0\31\4\1\0\3\4"+
    "\13\0\1\157\1\0\3\157\24\0\1\157\5\0\6\4"+
    "\1\0\1\4\1\160\1\4\3\160\23\4\1\0\1\160"+
    "\2\4\3\0\1\51\1\4\1\52\1\53\1\126\1\4"+
    "\1\127\1\56\5\4\1\60\11\4\1\61\2\4\1\62"+
    "\1\63\4\4\1\0\3\4\3\0\1\51\1\4\1\52"+
    "\1\53\1\126\1\4\1\127\1\56\5\125\1\60\1\125"+
    "\10\4\1\61\2\4\1\62\1\63\4\4\1\0\1\125"+
    "\2\4\3\0\1\51\1\4\1\52\1\53\1\54\1\4"+
    "\1\55\1\56\1\124\1\125\3\124\1\60\1\125\10\4"+
    "\1\61\2\4\1\62\1\63\2\4\1\64\1\4\1\65"+
    "\1\124\1\4\1\66\3\0\6\4\1\0\10\4\1\107"+
    "\20\4\1\0\3\4\3\0\6\4\1\0\23\4\1\161"+
    "\5\4\1\0\3\4\3\0\6\4\1\0\20\4\1\162"+
    "\10\4\1\0\3\4\3\0\6\4\1\0\21\4\1\163"+
    "\7\4\1\0\3\4\3\0\5\4\1\164\1\0\31\4"+
    "\1\0\3\4\3\0\6\4\1\0\1\105\30\4\1\0"+
    "\3\4\3\0\6\4\1\0\20\4\1\165\10\4\1\0"+
    "\3\4\3\0\1\4\1\166\4\4\1\0\31\4\1\0"+
    "\3\4\3\0\40\103\1\0\3\103\1\0\1\167\1\0"+
    "\3\4\1\170\2\4\1\0\31\4\1\0\3\4\3\0"+
    "\6\4\1\0\23\4\1\115\5\4\1\0\3\4\3\0"+
    "\1\171\2\0\1\172\1\0\1\173\1\106\1\174\1\175"+
    "\1\176\1\177\1\200\1\177\1\0\1\176\2\0\1\201"+
    "\1\0\1\202\1\203\2\0\1\204\1\205\4\0\1\206"+
    "\3\0\1\176\5\0\6\4\1\0\1\207\30\4\1\0"+
    "\3\4\3\0\6\4\1\0\1\210\30\4\1\0\3\4"+
    "\3\0\6\4\1\0\10\4\1\211\20\4\1\0\3\4"+
    "\6\0\1\212\1\213\1\0\1\112\1\214\1\215\1\216"+
    "\1\217\1\216\1\220\1\0\1\216\1\221\21\0\1\216"+
    "\5\0\2\4\1\222\3\4\1\0\31\4\1\0\3\4"+
    "\3\0\6\4\1\0\16\4\1\223\12\4\1\0\3\4"+
    "\3\0\4\4\1\224\1\4\1\0\31\4\1\0\3\4"+
    "\3\0\6\4\1\0\12\4\1\225\16\4\1\0\3\4"+
    "\3\0\6\4\1\0\20\4\1\226\10\4\1\0\3\4"+
    "\3\0\1\4\1\227\4\4\1\0\31\4\1\0\3\4"+
    "\3\0\6\4\1\0\20\4\1\105\10\4\1\0\3\4"+
    "\3\0\6\4\1\0\1\125\30\4\1\0\3\4\3\0"+
    "\5\4\1\230\1\0\31\4\1\0\3\4\3\0\6\4"+
    "\1\0\22\4\1\134\4\4\1\135\1\4\1\0\3\4"+
    "\3\0\1\136\1\0\1\137\1\140\1\231\1\0\1\127"+
    "\1\142\17\0\1\143\2\0\1\144\1\145\23\0\5\232"+
    "\1\0\1\232\22\0\1\232\5\0\6\4\1\0\25\4"+
    "\1\233\3\4\1\0\3\4\3\0\5\4\1\234\1\0"+
    "\31\4\1\0\3\4\3\0\1\4\1\235\4\4\1\0"+
    "\14\4\1\236\14\4\1\0\3\4\3\0\6\4\1\0"+
    "\17\4\1\237\11\4\1\0\3\4\3\0\1\4\1\240"+
    "\4\4\1\0\31\4\1\0\3\4\22\0\1\241\64\0"+
    "\1\242\15\0\1\243\45\0\1\232\25\0\1\244\4\0"+
    "\1\245\12\0\1\246\63\0\1\247\46\0\1\250\33\0"+
    "\1\251\24\0\1\252\20\0\1\232\43\0\6\4\1\0"+
    "\30\4\1\253\1\0\3\4\3\0\6\4\1\0\2\4"+
    "\4\151\1\4\1\151\21\4\1\0\1\151\2\4\3\0"+
    "\6\4\1\0\6\4\1\254\22\4\1\0\3\4\3\0"+
    "\6\4\1\0\1\4\1\151\1\4\1\151\1\4\1\151"+
    "\1\254\22\4\1\0\3\4\3\0\6\4\1\0\27\4"+
    "\1\255\1\4\1\0\3\4\3\0\6\4\1\0\26\4"+
    "\1\253\2\4\1\0\3\4\3\0\6\4\1\0\1\256"+
    "\30\4\1\0\3\4\3\0\6\4\1\0\1\257\20\4"+
    "\1\260\7\4\1\0\3\4\13\0\5\261\1\0\1\261"+
    "\22\0\1\261\5\0\6\4\1\0\1\4\5\262\1\4"+
    "\1\262\21\4\1\0\1\262\2\4\3\0\6\4\1\0"+
    "\1\263\30\4\1\0\3\4\3\0\5\4\1\264\1\0"+
    "\31\4\1\0\3\4\3\0\6\4\1\0\21\4\1\265"+
    "\7\4\1\0\3\4\3\0\6\4\1\0\22\4\1\266"+
    "\6\4\1\0\3\4\3\0\5\4\1\226\1\0\31\4"+
    "\1\0\3\4\3\0\6\4\1\0\16\4\1\267\12\4"+
    "\1\0\3\4\3\0\6\4\1\270\31\4\1\0\3\4"+
    "\4\0\1\271\47\0\1\272\46\0\1\273\1\274\20\0"+
    "\1\275\4\0\1\276\34\0\1\277\40\0\4\176\1\0"+
    "\1\176\22\0\1\176\5\0\1\136\1\0\1\137\1\140"+
    "\1\231\1\0\1\127\1\142\5\0\1\300\11\0\1\143"+
    "\2\0\1\144\1\145\13\0\1\136\1\0\1\137\1\140"+
    "\1\231\1\0\1\127\1\142\5\176\1\300\1\176\10\0"+
    "\1\143\2\0\1\144\1\145\5\0\1\176\5\0\1\136"+
    "\1\0\1\137\1\140\1\231\1\0\1\127\1\142\1\176"+
    "\3\0\1\176\1\300\11\0\1\143\2\0\1\144\1\145"+
    "\32\0\1\301\46\0\1\302\33\0\1\303\46\0\1\304"+
    "\24\0\1\272\21\0\1\305\66\0\1\306\22\0\6\4"+
    "\1\0\16\4\1\307\12\4\1\0\3\4\3\0\6\4"+
    "\1\0\16\4\1\310\12\4\1\0\3\4\3\0\1\4"+
    "\1\311\4\4\1\0\31\4\1\0\3\4\5\0\1\312"+
    "\22\0\1\313\21\0\1\314\50\0\1\315\54\0\1\316"+
    "\1\317\3\316\1\0\1\317\21\0\1\47\1\316\1\0"+
    "\1\47\7\0\1\146\1\0\1\320\1\0\1\130\1\0"+
    "\3\130\21\0\1\146\1\0\1\65\1\130\1\0\1\65"+
    "\7\0\1\146\1\0\1\320\1\0\1\316\1\0\3\316"+
    "\21\0\1\146\1\0\1\65\1\130\1\0\1\65\7\0"+
    "\1\146\1\0\1\320\1\0\1\321\1\317\1\321\1\316"+
    "\1\321\1\0\1\317\17\0\1\146\1\0\1\65\1\316"+
    "\1\0\1\65\42\0\1\322\7\0\1\4\1\323\4\4"+
    "\1\0\31\4\1\0\3\4\3\0\6\4\1\0\17\4"+
    "\1\324\11\4\1\0\3\4\3\0\6\4\1\0\14\4"+
    "\1\225\14\4\1\0\3\4\3\0\6\4\1\325\31\4"+
    "\1\0\3\4\3\0\6\4\1\326\31\4\1\0\3\4"+
    "\34\0\1\244\4\0\1\245\10\0\1\4\1\327\4\4"+
    "\1\330\1\4\2\331\1\332\1\331\1\333\1\4\1\331"+
    "\21\4\1\0\1\331\2\4\3\0\2\4\1\334\3\4"+
    "\1\330\1\4\2\331\1\332\1\331\1\333\1\4\1\331"+
    "\21\4\1\0\1\331\2\4\3\0\6\4\1\330\1\4"+
    "\2\331\1\332\1\331\1\333\1\4\1\331\16\4\1\335"+
    "\2\4\1\0\1\331\2\4\3\0\6\4\1\330\1\4"+
    "\2\331\1\332\1\331\1\333\1\4\1\331\21\4\1\0"+
    "\1\331\2\4\3\0\6\4\1\330\1\4\2\331\1\332"+
    "\1\331\1\333\1\4\1\331\12\4\1\336\6\4\1\0"+
    "\1\331\2\4\3\0\6\4\1\330\1\4\2\331\1\332"+
    "\1\331\1\333\1\4\1\331\6\4\1\337\12\4\1\0"+
    "\1\331\2\4\37\0\1\340\17\0\1\341\42\0\1\342"+
    "\21\0\1\330\51\0\1\343\21\0\1\344\104\0\1\345"+
    "\45\0\1\346\45\0\1\345\20\0\1\347\46\0\1\350"+
    "\20\0\1\351\16\0\6\4\1\330\1\4\2\331\1\332"+
    "\1\331\1\333\1\4\1\331\1\352\20\4\1\0\1\331"+
    "\2\4\3\0\6\4\1\0\1\4\2\331\1\332\1\331"+
    "\1\333\1\4\1\331\21\4\1\0\1\331\2\4\3\0"+
    "\5\4\1\353\1\330\1\4\2\331\1\332\1\331\1\333"+
    "\1\4\1\331\21\4\1\0\1\331\2\4\3\0\6\4"+
    "\1\330\1\4\2\331\1\332\1\331\1\333\1\4\1\331"+
    "\12\4\1\354\6\4\1\0\1\331\2\4\3\0\6\4"+
    "\1\330\1\4\2\331\1\332\1\331\1\333\1\4\1\331"+
    "\1\236\20\4\1\0\1\331\2\4\3\0\6\4\1\330"+
    "\1\4\2\331\1\332\1\331\1\333\1\4\1\331\4\4"+
    "\1\236\14\4\1\0\1\331\2\4\7\0\1\146\1\0"+
    "\1\320\27\0\1\146\10\0\4\4\1\64\1\4\1\320"+
    "\27\4\1\64\1\4\1\0\3\4\3\0\6\4\1\0"+
    "\10\4\1\355\20\4\1\0\3\4\3\0\6\4\1\0"+
    "\10\4\1\266\20\4\1\0\3\4\3\0\2\4\1\356"+
    "\3\4\1\0\31\4\1\0\3\4\3\0\1\4\1\357"+
    "\4\4\1\0\31\4\1\0\3\4\3\0\6\4\1\0"+
    "\20\4\1\360\10\4\1\0\3\4\3\0\1\171\2\0"+
    "\1\361\1\213\1\173\1\270\1\362\1\363\1\364\1\365"+
    "\1\366\1\367\1\0\1\364\1\221\1\0\1\201\1\0"+
    "\1\202\1\203\2\0\1\204\1\205\4\0\1\206\3\0"+
    "\1\364\32\0\1\370\30\0\1\370\42\0\1\371\3\0"+
    "\1\372\22\0\1\373\15\0\1\374\72\0\1\375\3\0"+
    "\1\376\34\0\1\377\47\0\1\u0100\36\0\1\u0101\3\u0102"+
    "\1\u0103\1\0\1\u0102\22\0\1\u0102\37\0\1\u0104\43\0"+
    "\1\u0105\47\0\1\u0106\23\0\1\u0107\70\0\1\u0108\20\0"+
    "\1\u0109\45\0\6\4\1\0\1\u010a\30\4\1\0\3\4"+
    "\3\0\6\4\1\0\17\4\1\u010b\11\4\1\0\3\4"+
    "\3\0\6\4\1\0\1\u010c\30\4\1\0\3\4\4\0"+
    "\1\u010d\77\0\1\u010e\21\0\1\u010f\43\0\1\u0110\54\0"+
    "\1\u0111\1\232\3\u0111\1\0\1\232\21\0\1\47\1\u0111"+
    "\1\0\1\47\13\0\1\130\1\0\3\130\23\0\1\47"+
    "\1\130\1\0\1\47\7\0\1\146\1\0\1\320\1\0"+
    "\1\u0111\1\232\3\u0111\1\0\1\232\17\0\1\146\1\0"+
    "\1\65\1\u0111\1\0\1\65\22\0\1\u010d\27\0\1\4"+
    "\1\u0112\4\4\1\0\31\4\1\0\3\4\3\0\6\4"+
    "\1\0\15\4\1\u0113\13\4\1\0\3\4\3\0\1\171"+
    "\2\0\1\172\1\0\1\u0114\1\325\12\0\1\201\5\0"+
    "\1\204\17\0\1\u0115\2\0\1\u0116\1\0\1\u0114\1\326"+
    "\12\0\1\u0117\1\0\1\u0118\3\0\1\204\17\0\6\4"+
    "\1\0\22\4\1\354\6\4\1\0\3\4\11\0\1\330"+
    "\1\0\2\u0119\1\u011a\1\u0119\1\u011b\1\0\1\u0119\22\0"+
    "\1\u0119\5\0\6\4\1\0\1\4\5\225\1\4\1\225"+
    "\21\4\1\0\1\225\2\4\3\0\6\4\1\0\1\4"+
    "\1\u011c\4\225\1\4\1\225\21\4\1\0\1\225\2\4"+
    "\3\0\6\4\1\0\1\4\5\225\1\4\1\u011c\21\4"+
    "\1\0\1\225\2\4\3\0\6\4\1\0\25\4\1\u011d"+
    "\3\4\1\0\3\4\3\0\6\4\1\0\15\4\1\236"+
    "\13\4\1\0\3\4\3\0\6\4\1\0\20\4\1\u011e"+
    "\10\4\1\0\3\4\3\0\6\4\1\0\21\4\1\236"+
    "\7\4\1\0\3\4\4\0\1\u011f\4\0\1\330\1\0"+
    "\2\u0119\1\u011a\1\u0119\1\u011b\1\0\1\u0119\22\0\1\u0119"+
    "\7\0\1\u0120\3\0\1\330\1\0\2\u0119\1\u011a\1\u0119"+
    "\1\u011b\1\0\1\u0119\22\0\1\u0119\13\0\1\330\1\0"+
    "\2\u0119\1\u011a\1\u0119\1\u011b\1\0\1\u0119\16\0\1\u0121"+
    "\3\0\1\u0119\13\0\1\330\1\0\2\u0119\1\u011a\1\u0119"+
    "\1\u011b\1\0\1\u0119\12\0\1\u0122\7\0\1\u0119\13\0"+
    "\1\330\1\0\2\u0119\1\u011a\1\u0119\1\u011b\1\0\1\u0119"+
    "\6\0\1\u0123\13\0\1\u0119\13\0\1\330\1\0\2\u0119"+
    "\1\u011a\1\u0119\1\u011b\1\0\1\u0119\1\u0124\21\0\1\u0119"+
    "\12\0\1\u0125\1\330\1\0\2\u0119\1\u011a\1\u0119\1\u011b"+
    "\1\0\1\u0119\22\0\1\u0119\13\0\1\330\1\0\2\u0119"+
    "\1\u011a\1\u0119\1\u011b\1\0\1\u0119\12\0\1\u0126\7\0"+
    "\1\u0119\13\0\1\330\1\0\2\u0119\1\u011a\1\u0119\1\u011b"+
    "\1\0\1\u0119\1\330\21\0\1\u0119\13\0\1\330\1\0"+
    "\2\u0119\1\u011a\1\u0119\1\u011b\1\0\1\u0119\4\0\1\330"+
    "\15\0\1\u0119\5\0\3\4\1\334\2\4\1\0\31\4"+
    "\1\0\3\4\3\0\6\4\1\0\10\4\1\352\20\4"+
    "\1\0\3\4\3\0\4\4\1\u0127\1\4\1\0\31\4"+
    "\1\0\3\4\3\0\6\4\1\0\20\4\1\357\10\4"+
    "\1\0\3\4\3\0\6\4\1\0\12\4\1\u0128\16\4"+
    "\1\0\3\4\3\0\5\4\1\u0129\1\0\31\4\1\0"+
    "\3\4\5\0\1\u012a\22\0\1\313\23\0\1\315\14\0"+
    "\1\277\37\0\1\316\1\u012b\3\u012c\1\0\1\u012b\21\0"+
    "\1\47\1\u012c\1\0\1\47\3\0\1\136\1\0\1\137"+
    "\1\140\1\141\1\0\1\55\1\142\1\130\1\0\3\130"+
    "\1\300\11\0\1\143\2\0\1\144\1\145\2\0\1\146"+
    "\1\0\1\65\1\130\1\0\1\65\3\0\1\136\1\0"+
    "\1\137\1\140\1\141\1\0\1\55\1\142\1\u012c\1\176"+
    "\3\u012c\1\300\1\176\10\0\1\143\2\0\1\144\1\145"+
    "\2\0\1\146\1\0\1\65\1\u012d\1\0\1\65\3\0"+
    "\1\136\1\0\1\137\1\140\1\141\1\0\1\55\1\142"+
    "\1\u012d\1\0\2\130\1\u012d\1\300\11\0\1\143\2\0"+
    "\1\144\1\145\2\0\1\146\1\0\1\65\1\130\1\0"+
    "\1\65\3\0\1\136\1\0\1\137\1\140\1\141\1\0"+
    "\1\55\1\142\1\u012e\1\u012b\1\u012e\1\u012c\1\u012e\1\300"+
    "\1\u012b\10\0\1\143\2\0\1\144\1\145\2\0\1\146"+
    "\1\0\1\65\1\u012c\1\0\1\65\35\0\1\373\16\0"+
    "\1\u012f\71\0\1\u0130\25\0\1\u0131\63\0\1\u0132\54\0"+
    "\1\u0133\20\0\1\u0134\74\0\1\370\24\0\1\u0135\52\0"+
    "\4\u0102\1\0\1\u0102\22\0\1\u0102\22\0\1\u0136\41\0"+
    "\1\u0102\1\0\1\u0102\1\0\1\u0102\1\u0136\40\0\1\u0137"+
    "\44\0\1\u0138\71\0\1\u0139\47\0\1\u013a\22\0\1\u0133"+
    "\66\0\1\u013b\21\0\6\4\1\0\17\4\1\125\11\4"+
    "\1\0\3\4\3\0\6\4\1\0\15\4\1\u013c\13\4"+
    "\1\0\3\4\3\0\2\4\1\42\3\4\1\0\31\4"+
    "\1\0\3\4\12\0\1\u013d\46\0\1\u013e\56\0\1\u013f"+
    "\36\0\1\232\37\0\2\4\1\u0140\3\4\1\0\31\4"+
    "\1\0\3\4\3\0\5\4\1\225\1\0\31\4\1\0"+
    "\3\4\27\0\1\u0141\4\0\1\276\16\0\1\271\1\u0142"+
    "\46\0\1\u0143\63\0\1\u0144\46\0\1\u0145\37\0\5\u0132"+
    "\1\0\1\u0132\22\0\1\u0132\15\0\1\u0146\4\u0132\1\0"+
    "\1\u0132\22\0\1\u0132\15\0\5\u0132\1\0\1\u0146\22\0"+
    "\1\u0132\5\0\6\4\1\0\1\4\5\331\1\4\1\331"+
    "\21\4\1\0\1\331\2\4\3\0\6\4\1\0\10\4"+
    "\1\u0147\20\4\1\0\3\4\3\0\5\4\1\236\1\0"+
    "\31\4\1\0\3\4\34\0\1\u0126\51\0\1\u0148\36\0"+
    "\1\330\51\0\1\u0149\47\0\1\330\21\0\1\u0120\62\0"+
    "\1\u0124\33\0\1\u014a\42\0\1\4\1\u014b\4\4\1\0"+
    "\31\4\1\0\3\4\3\0\6\4\1\0\10\4\1\u014c"+
    "\20\4\1\0\3\4\3\0\3\4\1\u014d\2\4\1\0"+
    "\31\4\1\0\3\4\4\0\1\u010d\5\0\1\370\37\0"+
    "\1\136\1\0\1\137\1\140\1\231\1\0\1\127\1\142"+
    "\1\130\1\0\3\130\1\300\11\0\1\143\2\0\1\144"+
    "\1\145\4\0\1\47\1\130\1\0\1\47\3\0\1\136"+
    "\1\0\1\137\1\140\1\231\1\0\1\127\1\142\1\u0111"+
    "\1\232\3\u0111\1\300\1\232\10\0\1\143\2\0\1\144"+
    "\1\145\4\0\1\47\1\u0111\1\0\1\47\3\0\1\136"+
    "\1\0\1\137\1\140\1\231\1\0\1\127\1\142\5\232"+
    "\1\300\1\232\10\0\1\143\2\0\1\144\1\145\5\0"+
    "\1\232\5\0\1\136\1\0\1\137\1\140\1\141\1\0"+
    "\1\55\1\142\1\u0111\1\232\3\u0111\1\300\1\232\10\0"+
    "\1\143\2\0\1\144\1\145\2\0\1\146\1\0\1\65"+
    "\1\u0111\1\0\1\65\4\0\1\u014e\73\0\1\u014f\43\0"+
    "\1\u0132\31\0\1\325\46\0\1\326\50\0\2\u0119\1\u011a"+
    "\1\u0119\1\u011b\1\0\1\u0119\22\0\1\u0119\24\0\1\u0150"+
    "\46\0\1\u013a\31\0\1\u0151\45\0\1\u0152\74\0\1\u0153"+
    "\17\0\5\4\1\125\1\0\31\4\1\0\3\4\30\0"+
    "\1\u0154\46\0\1\u0155\22\0\1\u0156\76\0\1\376\16\0"+
    "\1\u0157\54\0\1\u0158\56\0\1\u0159\12\0\1\u0104\20\0"+
    "\1\u015a\52\0\5\u0119\1\0\1\u0119\22\0\1\u0119\5\0"+
    "\1\4\1\236\4\4\1\0\31\4\1\0\3\4\22\0"+
    "\1\u015b\34\0\1\330\42\0\1\u015c\45\0\6\4\1\0"+
    "\14\4\1\236\14\4\1\0\3\4\3\0\6\4\1\0"+
    "\10\4\1\u015d\20\4\1\0\3\4\3\0\4\4\1\u015e"+
    "\1\4\1\0\31\4\1\0\3\4\4\0\1\u015f\71\0"+
    "\1\u0160\51\0\1\u0152\40\0\1\u0161\32\0\1\u0162\50\0"+
    "\1\u0163\65\0\1\u0164\27\0\1\214\44\0\1\u0165\46\0"+
    "\1\u0166\24\0\1\373\36\0\1\u0132\25\0\1\u0132\46\0"+
    "\1\330\70\0\1\330\23\0\6\4\1\0\1\225\30\4"+
    "\1\0\3\4\3\0\6\4\1\0\20\4\1\225\10\4"+
    "\1\0\3\4\5\0\1\u0167\51\0\1\u0132\60\0\1\u0168"+
    "\32\0\1\u0169\71\0\1\232\44\0\1\u016a\31\0\1\372"+
    "\63\0\1\u0132\41\0\1\u016b\33\0\1\u016c\47\0\1\232"+
    "\50\0\1\u0132\66\0\1\u0132\16\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13611];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\44\1\1\0\5\1\1\0\7\1\1\0"+
    "\15\1\1\0\2\1\1\0\3\1\1\0\14\1\2\0"+
    "\5\1\11\0\10\1\1\0\7\1\1\11\1\1\16\0"+
    "\3\1\10\0\7\1\1\0\1\11\6\1\12\0\15\1"+
    "\17\0\3\1\11\0\2\1\2\0\32\1\7\0\1\1"+
    "\3\0\1\1\1\0\2\1\2\0\3\1\2\0\1\1"+
    "\2\0\3\1\4\0\3\1\10\0\3\1\10\0\3\1"+
    "\10\0\1\11\11\0\1\1\3\0\1\1\5\0\2\1"+
    "\3\0\3\1\12\0\1\1\4\0\2\1\16\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[364];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  String name;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 152) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 2: 
          { return new WordToken(yytext());
          }
        case 7: break;
        case 3: 
          { return new TagToken(yytext());
          }
        case 8: break;
        case 5: 
          { String contents = yytext();
	String[] split = contents.split("\\s+", 2);

	// Handles the optional qualifier
	if (split.length == 2 && (split[0].equalsIgnoreCase("at") || split[0].equalsIgnoreCase("from"))) {
		return new TimeToken(split[1].trim());
	}
	else {
		return new TimeToken(yytext());
	}
          }
        case 9: break;
        case 6: 
          { String contents = yytext();
    return new WordToken(contents.substring(1, contents.length()-1));
          }
        case 10: break;
        case 4: 
          { String contents = yytext();
	String[] split = contents.split("\\s+", 2);

	// Handles the optional qualifier
	if (split.length == 2 && (split[0].equalsIgnoreCase("on") || split[0].equalsIgnoreCase("from"))) {
		return new DateToken(split[1].trim());
	}
	else {
		return new DateToken(yytext());
	}
          }
        case 11: break;
        case 1: 
          { 
          }
        case 12: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
