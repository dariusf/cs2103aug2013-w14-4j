/* The following code was generated by JFlex 1.4.3 on 10/15/13 11:14 PM */


package parser;

/**
   This is a lexical analyser generated by JFlex 1.4.3.
   We use it to tokenize input strings.

   The specification for the lexer can be found in the
   root folder of the project.
*/

@SuppressWarnings("unused")


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 10/15/13 11:14 PM from the specification file
 * <tt>lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\0\25\0\1\7\2\0\1\43\3\0\1\44\5\0\1\16"+
    "\1\0\1\45\1\11\1\15\1\13\1\14\2\41\3\12\1\17\1\40"+
    "\6\0\1\5\1\33\1\34\1\30\1\23\1\1\1\36\1\20\1\21"+
    "\1\32\1\42\1\25\1\4\1\10\1\3\1\35\1\42\1\2\1\22"+
    "\1\6\1\26\1\37\1\27\1\24\1\31\1\42\6\0\1\5\1\33"+
    "\1\34\1\30\1\23\1\1\1\36\1\20\1\21\1\32\1\42\1\25"+
    "\1\4\1\10\1\3\1\35\1\42\1\2\1\22\1\6\1\26\1\37"+
    "\1\27\1\24\1\31\1\42\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\20\2\2\1\13\2\1\0\4\2\1\0"+
    "\1\2\1\0\4\2\1\0\5\2\1\3\1\0\1\2"+
    "\1\4\2\0\2\2\1\4\1\2\2\4\2\2\2\0"+
    "\3\2\1\5\2\2\11\0\1\2\1\0\2\4\4\2"+
    "\1\0\1\2\2\4\2\2\20\0\2\2\1\4\2\2"+
    "\1\0\1\5\6\4\12\0\1\4\1\0\4\4\1\5"+
    "\3\2\16\0\1\2\1\0\1\2\1\4\7\2\12\4"+
    "\1\2\3\0\5\2\5\0\1\4\2\0\1\4\1\0"+
    "\2\4\2\0\2\4\1\2\1\0\1\4\2\2\10\0"+
    "\2\4\2\2\10\0\1\2\1\0\1\2\3\0\2\2"+
    "\6\0\1\2\5\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[248];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\46\0\114\0\162\0\230\0\276\0\344\0\u010a"+
    "\0\u0130\0\u0156\0\u017c\0\u01a2\0\u01c8\0\u01ee\0\u0214\0\u023a"+
    "\0\u0260\0\u0286\0\u02ac\0\u02d2\0\u02f8\0\u031e\0\u0344\0\u036a"+
    "\0\u0390\0\u03b6\0\u03dc\0\u0402\0\u0428\0\u044e\0\u0474\0\u049a"+
    "\0\u04c0\0\u04e6\0\u050c\0\u0532\0\u0558\0\u057e\0\u05a4\0\u05ca"+
    "\0\u05f0\0\u0616\0\u063c\0\u0662\0\u0688\0\u06ae\0\u06d4\0\u06fa"+
    "\0\u0720\0\u02ac\0\u0746\0\u076c\0\u0792\0\u07b8\0\u07de\0\u0804"+
    "\0\u082a\0\u0850\0\u0876\0\u089c\0\u08c2\0\u08e8\0\u090e\0\u0934"+
    "\0\u095a\0\u0980\0\u09a6\0\u09cc\0\162\0\u09f2\0\u0a18\0\u0a3e"+
    "\0\u0a64\0\u0a8a\0\u0ab0\0\u0ad6\0\u0afc\0\u0b22\0\u0b48\0\u0b6e"+
    "\0\u0b94\0\u0bba\0\u0be0\0\u0c06\0\u0c2c\0\u0c52\0\u0c78\0\u0c9e"+
    "\0\u0cc4\0\u0cea\0\u0d10\0\u0d36\0\46\0\u0d5c\0\u0d82\0\u0da8"+
    "\0\u0dce\0\u0df4\0\u0e1a\0\u0e40\0\u0e66\0\u0e8c\0\u0eb2\0\u0ed8"+
    "\0\u0efe\0\u0f24\0\u0f4a\0\u0f70\0\u0f96\0\u0fbc\0\u0fe2\0\u1008"+
    "\0\162\0\u102e\0\u08c2\0\u1054\0\46\0\u107a\0\u10a0\0\u10c6"+
    "\0\u10ec\0\u1112\0\u1138\0\u115e\0\u1184\0\u11aa\0\u11d0\0\u11f6"+
    "\0\u121c\0\u1242\0\u1268\0\u128e\0\u12b4\0\u12da\0\u1300\0\u1326"+
    "\0\u134c\0\u1372\0\u1398\0\u13be\0\u13e4\0\u140a\0\u1430\0\u1456"+
    "\0\u147c\0\u14a2\0\u14c8\0\u14ee\0\u1514\0\u153a\0\u1560\0\u1586"+
    "\0\u15ac\0\u15d2\0\u15f8\0\u161e\0\u13be\0\u1644\0\u166a\0\u1690"+
    "\0\u16b6\0\u16dc\0\u1702\0\u1728\0\u174e\0\u1774\0\u179a\0\u17c0"+
    "\0\u17e6\0\u180c\0\u1832\0\u1858\0\u187e\0\u18a4\0\u18ca\0\u18f0"+
    "\0\u1916\0\u193c\0\u1962\0\u1988\0\u19ae\0\u19d4\0\u19fa\0\u1a20"+
    "\0\u1a46\0\u0792\0\u1a6c\0\u1a92\0\u1ab8\0\u1ade\0\u1b04\0\u1b2a"+
    "\0\u1b50\0\u1b76\0\u1b9c\0\u1bc2\0\u1be8\0\u1c0e\0\u1c34\0\u1c5a"+
    "\0\u1c80\0\u1ca6\0\u1ccc\0\u1cf2\0\u1d18\0\u1d3e\0\u1d64\0\u1d8a"+
    "\0\u1db0\0\u1dd6\0\u1dfc\0\u1e22\0\u1e48\0\u1e6e\0\u1e94\0\u1eba"+
    "\0\46\0\u1ee0\0\u1f06\0\u1f2c\0\u1f52\0\u1f78\0\u1f9e\0\u1fc4"+
    "\0\u1c34\0\u1fea\0\u2010\0\u2036\0\u0850\0\u205c\0\u2082\0\u20a8"+
    "\0\u20ce\0\u20f4\0\u211a\0\u2140\0\u2166\0\u218c\0\u1b50\0\u21b2"+
    "\0\u21d8\0\u21fe\0\u2224\0\u224a\0\u2270\0\u1bc2\0\u2296\0\u22bc";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[248];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\2"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\2\1\13"+
    "\1\17\1\4\1\20\2\4\1\21\1\4\1\22\10\4"+
    "\1\2\1\13\1\4\1\23\1\24\1\2\47\0\1\4"+
    "\1\25\4\4\1\0\6\4\1\0\21\4\1\0\2\4"+
    "\4\0\6\4\1\0\6\4\1\0\21\4\1\0\2\4"+
    "\4\0\6\4\1\0\1\26\5\4\1\0\21\4\1\0"+
    "\2\4\4\0\2\4\1\27\3\4\1\0\6\4\1\0"+
    "\21\4\1\0\2\4\4\0\5\4\1\30\1\0\6\4"+
    "\1\0\21\4\1\0\2\4\4\0\2\4\1\31\1\32"+
    "\2\4\1\0\6\4\1\0\1\4\1\33\5\4\1\34"+
    "\11\4\1\0\2\4\4\0\6\4\1\0\6\4\1\0"+
    "\4\4\1\35\14\4\1\0\2\4\4\0\6\4\1\0"+
    "\1\4\1\36\4\37\1\0\1\37\20\4\1\40\1\37"+
    "\1\4\4\0\1\41\1\4\1\42\1\43\1\44\1\4"+
    "\1\45\1\46\5\4\1\47\3\4\1\50\5\4\1\51"+
    "\1\4\1\52\2\4\1\53\2\4\1\54\2\4\2\0"+
    "\1\47\1\0\1\41\1\4\1\42\1\43\1\44\1\4"+
    "\1\45\1\46\1\37\1\55\3\37\1\47\1\55\2\4"+
    "\1\50\5\4\1\51\1\4\1\52\2\4\1\53\2\4"+
    "\1\54\1\55\1\4\2\0\1\47\1\0\1\41\1\4"+
    "\1\42\1\43\1\44\1\4\1\45\1\46\1\55\3\4"+
    "\1\55\1\47\3\4\1\50\5\4\1\51\1\4\1\52"+
    "\2\4\1\53\2\4\1\54\2\4\2\0\1\47\1\0"+
    "\1\41\1\4\1\42\1\43\1\44\1\4\1\45\1\46"+
    "\1\13\1\37\1\13\1\37\1\13\1\47\1\37\2\4"+
    "\1\50\5\4\1\51\1\4\1\52\2\4\1\53\2\4"+
    "\1\54\1\37\1\4\2\0\1\47\1\0\4\4\1\56"+
    "\1\4\1\0\6\4\1\0\21\4\1\0\2\4\4\0"+
    "\4\4\1\57\1\4\1\0\6\4\1\0\7\4\1\27"+
    "\11\4\1\0\2\4\4\0\4\4\1\60\1\4\1\0"+
    "\6\4\1\0\21\4\1\0\2\4\4\0\6\4\1\0"+
    "\6\4\1\0\4\4\1\61\14\4\1\0\2\4\4\0"+
    "\6\62\1\0\6\62\1\0\21\62\1\0\2\62\4\0"+
    "\15\63\1\0\24\63\2\0\1\63\1\0\2\4\1\64"+
    "\3\4\1\0\6\4\1\0\2\4\1\65\16\4\1\0"+
    "\2\4\4\0\6\4\1\66\6\4\1\0\21\4\1\0"+
    "\2\4\4\0\6\4\1\0\1\65\5\4\1\0\21\4"+
    "\1\0\2\4\4\0\6\4\1\67\6\4\1\0\21\4"+
    "\1\0\2\4\4\0\3\4\1\70\2\4\1\0\6\4"+
    "\1\0\11\4\1\71\7\4\1\0\2\4\4\0\1\4"+
    "\1\72\4\4\1\0\6\4\1\0\21\4\1\0\2\4"+
    "\4\0\6\4\1\0\6\4\1\0\2\4\1\73\4\4"+
    "\1\74\11\4\1\0\2\4\4\0\6\4\1\0\6\4"+
    "\1\0\4\4\1\75\14\4\1\0\2\4\4\0\6\4"+
    "\1\0\6\4\1\0\5\4\1\76\13\4\1\0\2\4"+
    "\4\0\6\4\1\0\6\4\1\0\21\4\1\40\2\4"+
    "\4\0\1\41\1\4\1\42\1\43\1\77\1\4\1\100"+
    "\1\46\5\4\1\47\3\4\1\50\5\4\1\51\1\4"+
    "\1\52\5\4\1\40\2\4\2\0\1\47\11\0\1\101"+
    "\1\0\3\101\23\0\1\101\5\0\6\4\1\0\6\4"+
    "\1\0\4\4\1\102\14\4\1\0\2\4\4\0\6\4"+
    "\1\0\6\4\1\0\15\4\1\103\3\4\1\0\2\4"+
    "\4\0\4\4\1\104\1\4\1\0\6\4\1\0\21\4"+
    "\1\0\2\4\4\0\3\4\1\105\2\4\1\0\6\4"+
    "\1\0\7\4\1\106\6\4\1\107\2\4\1\0\2\4"+
    "\4\0\1\110\1\0\1\111\1\112\1\113\1\0\1\45"+
    "\1\114\11\0\1\115\5\0\1\116\1\0\1\117\2\0"+
    "\1\120\11\0\2\4\1\121\3\4\1\0\6\4\1\0"+
    "\21\4\1\0\2\4\14\0\1\122\3\123\1\124\1\0"+
    "\1\123\21\0\1\123\5\0\6\4\1\0\6\4\1\0"+
    "\4\4\1\125\14\4\1\0\2\4\4\0\6\4\1\0"+
    "\6\4\1\0\4\4\1\126\14\4\1\0\2\4\4\0"+
    "\4\4\1\127\1\4\1\0\6\4\1\0\7\4\1\130"+
    "\11\4\1\0\2\4\4\0\3\4\1\105\2\4\1\0"+
    "\6\4\1\0\21\4\1\0\2\4\14\0\1\131\1\0"+
    "\3\131\23\0\1\131\5\0\1\41\1\4\1\42\1\43"+
    "\1\77\1\4\1\100\1\46\5\4\1\47\3\4\1\50"+
    "\5\4\1\51\1\4\1\52\5\4\1\0\2\4\2\0"+
    "\1\47\1\0\6\4\1\0\6\4\1\0\6\4\1\132"+
    "\12\4\1\0\2\4\4\0\5\4\1\133\1\0\6\4"+
    "\1\0\21\4\1\0\2\4\4\0\6\4\1\0\6\4"+
    "\1\0\3\4\1\76\15\4\1\0\2\4\4\0\6\4"+
    "\1\0\6\4\1\0\11\4\1\134\7\4\1\0\2\4"+
    "\4\0\15\63\1\0\24\63\1\0\1\135\1\63\1\0"+
    "\3\4\1\136\2\4\1\0\6\4\1\0\21\4\1\0"+
    "\2\4\4\0\6\4\1\0\6\4\1\0\11\4\1\71"+
    "\7\4\1\0\2\4\4\0\1\137\2\0\1\140\1\0"+
    "\1\141\1\66\1\142\1\143\1\144\1\145\1\146\1\145"+
    "\1\0\1\144\1\147\1\0\1\150\2\0\1\151\1\0"+
    "\1\152\11\0\1\144\13\0\1\67\1\0\1\153\1\154"+
    "\1\155\1\154\1\156\1\0\1\154\21\0\1\154\5\0"+
    "\2\4\1\157\3\4\1\0\6\4\1\0\21\4\1\0"+
    "\2\4\4\0\4\4\1\160\1\4\1\0\6\4\1\0"+
    "\21\4\1\0\2\4\4\0\6\4\1\0\6\4\1\0"+
    "\10\4\1\161\10\4\1\0\2\4\4\0\6\4\1\0"+
    "\6\4\1\0\3\4\1\162\15\4\1\0\2\4\4\0"+
    "\1\4\1\163\4\4\1\0\6\4\1\0\21\4\1\0"+
    "\2\4\4\0\6\4\1\0\6\4\1\0\3\4\1\65"+
    "\15\4\1\0\2\4\4\0\5\4\1\162\1\0\6\4"+
    "\1\0\21\4\1\0\2\4\4\0\6\4\1\0\6\4"+
    "\1\0\7\4\1\106\6\4\1\107\2\4\1\0\2\4"+
    "\4\0\1\110\1\0\1\111\1\112\1\164\1\0\1\100"+
    "\1\114\11\0\1\115\5\0\1\116\1\0\1\117\24\0"+
    "\5\165\1\0\1\165\21\0\1\165\5\0\6\4\1\0"+
    "\6\4\1\0\14\4\1\166\4\4\1\0\2\4\4\0"+
    "\5\4\1\167\1\0\6\4\1\0\21\4\1\0\2\4"+
    "\4\0\1\4\1\170\4\4\1\0\6\4\1\0\12\4"+
    "\1\171\6\4\1\0\2\4\4\0\6\4\1\0\6\4"+
    "\1\0\17\4\1\172\1\4\1\0\2\4\4\0\1\4"+
    "\1\173\4\4\1\0\6\4\1\0\21\4\1\0\2\4"+
    "\26\0\1\174\56\0\1\175\16\0\1\176\44\0\1\165"+
    "\21\0\1\177\6\0\1\200\13\0\1\201\65\0\1\202"+
    "\45\0\1\203\27\0\1\204\20\0\1\205\23\0\1\165"+
    "\42\0\6\4\1\0\6\4\1\0\20\4\1\206\1\0"+
    "\2\4\15\0\4\123\1\0\1\123\21\0\1\123\22\0"+
    "\1\207\26\0\1\207\11\0\1\123\1\0\1\123\1\0"+
    "\1\123\1\207\26\0\1\207\1\0\6\4\1\0\6\4"+
    "\1\0\16\4\1\210\2\4\1\0\2\4\4\0\6\4"+
    "\1\0\6\4\1\0\15\4\1\206\3\4\1\0\2\4"+
    "\4\0\6\4\1\0\1\211\5\4\1\0\21\4\1\0"+
    "\2\4\4\0\6\4\1\0\1\212\5\4\1\0\6\4"+
    "\1\213\12\4\1\0\2\4\14\0\5\214\1\0\1\214"+
    "\21\0\1\214\5\0\6\4\1\0\6\4\1\0\6\4"+
    "\1\215\12\4\1\0\2\4\4\0\6\4\1\0\6\4"+
    "\1\0\7\4\1\216\11\4\1\0\2\4\4\0\6\4"+
    "\1\0\1\217\5\4\1\0\21\4\1\0\2\4\4\0"+
    "\6\4\1\220\6\4\1\0\21\4\1\0\2\4\5\0"+
    "\1\221\46\0\1\222\45\0\1\223\1\224\13\0\1\225"+
    "\5\0\1\226\42\0\1\227\34\0\4\144\1\0\1\144"+
    "\21\0\1\144\5\0\1\110\1\0\1\111\1\112\1\164"+
    "\1\0\1\100\1\114\5\0\1\47\3\0\1\115\5\0"+
    "\1\116\1\0\1\117\12\0\1\47\1\0\1\110\1\0"+
    "\1\111\1\112\1\164\1\0\1\100\1\114\5\144\1\47"+
    "\1\144\2\0\1\115\5\0\1\116\1\0\1\117\6\0"+
    "\1\144\3\0\1\47\1\0\1\110\1\0\1\111\1\112"+
    "\1\164\1\0\1\100\1\114\1\144\3\0\1\144\1\47"+
    "\3\0\1\115\5\0\1\116\1\0\1\117\12\0\1\47"+
    "\5\0\1\230\45\0\1\231\20\0\1\222\24\0\1\232"+
    "\63\0\1\233\33\0\5\234\1\0\1\234\20\0\1\40"+
    "\1\234\11\0\1\120\1\0\1\235\25\0\1\120\2\0"+
    "\1\54\12\0\1\120\1\0\1\235\1\0\1\234\1\0"+
    "\3\234\17\0\1\120\2\0\1\54\12\0\1\120\1\0"+
    "\1\235\1\0\1\154\1\234\1\154\1\234\1\154\1\0"+
    "\1\234\15\0\1\120\2\0\1\54\1\234\5\0\1\4"+
    "\1\236\4\4\1\0\6\4\1\0\21\4\1\0\2\4"+
    "\4\0\6\4\1\0\6\4\1\0\12\4\1\161\6\4"+
    "\1\0\2\4\4\0\6\4\1\237\6\4\1\0\21\4"+
    "\1\0\2\4\31\0\1\177\6\0\1\200\11\0\1\4"+
    "\1\240\4\4\1\241\1\4\2\242\1\243\1\242\1\244"+
    "\1\0\1\242\20\4\1\0\1\242\1\4\4\0\2\4"+
    "\1\245\3\4\1\241\1\4\2\242\1\243\1\242\1\244"+
    "\1\0\1\242\20\4\1\0\1\242\1\4\4\0\6\4"+
    "\1\241\1\4\2\242\1\243\1\242\1\244\1\0\1\242"+
    "\14\4\1\246\3\4\1\0\1\242\1\4\4\0\6\4"+
    "\1\241\1\4\2\242\1\243\1\242\1\244\1\0\1\242"+
    "\20\4\1\0\1\242\1\4\4\0\6\4\1\241\1\4"+
    "\2\242\1\243\1\242\1\244\1\0\1\242\6\4\1\247"+
    "\11\4\1\0\1\242\1\4\4\0\6\4\1\241\1\4"+
    "\2\242\1\243\1\242\1\244\1\0\1\242\1\4\1\250"+
    "\16\4\1\0\1\242\1\4\36\0\1\251\20\0\1\252"+
    "\41\0\1\253\26\0\1\241\52\0\1\254\11\0\1\255"+
    "\102\0\1\256\43\0\1\257\44\0\1\256\21\0\1\260"+
    "\45\0\1\261\14\0\1\262\21\0\6\4\1\241\1\4"+
    "\2\242\1\243\1\242\1\244\1\0\1\242\3\4\1\263"+
    "\14\4\1\0\1\242\1\4\14\0\2\264\1\265\1\264"+
    "\1\266\1\0\1\264\21\0\1\264\5\0\5\4\1\267"+
    "\1\241\1\4\2\242\1\243\1\242\1\244\1\0\1\242"+
    "\20\4\1\0\1\242\1\4\4\0\6\4\1\241\1\4"+
    "\2\242\1\243\1\242\1\244\1\0\1\242\6\4\1\270"+
    "\11\4\1\0\1\242\1\4\4\0\6\4\1\241\1\4"+
    "\2\242\1\243\1\242\1\244\1\0\1\242\3\4\1\171"+
    "\14\4\1\0\1\242\1\4\4\0\6\4\1\241\1\4"+
    "\2\242\1\243\1\242\1\244\1\0\1\242\11\4\1\171"+
    "\6\4\1\0\1\242\1\4\10\0\1\120\1\0\1\235"+
    "\25\0\1\120\11\0\2\4\1\271\3\4\1\0\6\4"+
    "\1\0\21\4\1\0\2\4\4\0\1\4\1\272\4\4"+
    "\1\0\6\4\1\0\21\4\1\0\2\4\4\0\6\4"+
    "\1\0\6\4\1\0\4\4\1\273\14\4\1\0\2\4"+
    "\4\0\1\137\2\0\1\140\1\0\1\141\1\220\1\142"+
    "\1\274\1\275\1\276\1\277\1\300\1\0\1\275\1\147"+
    "\1\0\1\150\2\0\1\151\1\0\1\152\11\0\1\275"+
    "\25\0\1\301\34\0\1\301\41\0\1\302\23\0\1\303"+
    "\17\0\1\304\64\0\1\305\4\0\1\306\42\0\1\307"+
    "\46\0\1\310\46\0\1\311\26\0\1\312\61\0\1\310"+
    "\53\0\1\313\55\0\1\40\6\0\1\4\1\314\4\4"+
    "\1\0\6\4\1\0\21\4\1\0\2\4\4\0\1\137"+
    "\2\0\1\140\1\0\1\315\1\237\12\0\1\150\4\0"+
    "\1\152\17\0\6\4\1\0\6\4\1\0\7\4\1\270"+
    "\11\4\1\0\2\4\12\0\1\241\1\0\2\264\1\265"+
    "\1\264\1\266\1\0\1\264\21\0\1\264\5\0\6\4"+
    "\1\0\1\4\5\161\1\0\1\161\20\4\1\0\1\161"+
    "\1\4\4\0\6\4\1\0\1\4\1\316\4\161\1\0"+
    "\1\161\20\4\1\0\1\161\1\4\4\0\6\4\1\0"+
    "\1\4\5\161\1\0\1\316\20\4\1\0\1\161\1\4"+
    "\4\0\6\4\1\0\6\4\1\0\14\4\1\317\4\4"+
    "\1\0\2\4\4\0\6\4\1\0\6\4\1\0\1\4"+
    "\1\171\17\4\1\0\2\4\4\0\6\4\1\0\6\4"+
    "\1\0\3\4\1\320\15\4\1\0\2\4\4\0\6\4"+
    "\1\0\6\4\1\0\6\4\1\171\12\4\1\0\2\4"+
    "\5\0\1\321\4\0\1\241\1\0\2\264\1\265\1\264"+
    "\1\266\1\0\1\264\21\0\1\264\7\0\1\322\3\0"+
    "\1\241\1\0\2\264\1\265\1\264\1\266\1\0\1\264"+
    "\21\0\1\264\13\0\1\241\1\0\2\264\1\265\1\264"+
    "\1\266\1\0\1\264\14\0\1\323\4\0\1\264\13\0"+
    "\1\241\1\0\2\264\1\265\1\264\1\266\1\0\1\264"+
    "\6\0\1\324\12\0\1\264\13\0\1\241\1\0\2\264"+
    "\1\265\1\264\1\266\1\0\1\264\1\0\1\325\17\0"+
    "\1\264\13\0\1\241\1\0\2\264\1\265\1\264\1\266"+
    "\1\0\1\264\3\0\1\326\15\0\1\264\12\0\1\327"+
    "\1\241\1\0\2\264\1\265\1\264\1\266\1\0\1\264"+
    "\21\0\1\264\13\0\1\241\1\0\2\264\1\265\1\264"+
    "\1\266\1\0\1\264\6\0\1\330\12\0\1\264\13\0"+
    "\1\241\1\0\2\264\1\265\1\264\1\266\1\0\1\264"+
    "\3\0\1\241\15\0\1\264\13\0\1\241\1\0\2\264"+
    "\1\265\1\264\1\266\1\0\1\264\11\0\1\241\7\0"+
    "\1\264\5\0\3\4\1\245\2\4\1\0\6\4\1\0"+
    "\21\4\1\0\2\4\14\0\5\331\1\0\1\331\21\0"+
    "\1\331\15\0\1\332\4\331\1\0\1\331\21\0\1\331"+
    "\15\0\5\331\1\0\1\332\21\0\1\331\5\0\6\4"+
    "\1\0\6\4\1\0\4\4\1\263\14\4\1\0\2\4"+
    "\4\0\4\4\1\333\1\4\1\0\6\4\1\0\21\4"+
    "\1\0\2\4\4\0\6\4\1\0\6\4\1\0\10\4"+
    "\1\334\10\4\1\0\2\4\4\0\6\4\1\0\6\4"+
    "\1\0\3\4\1\272\15\4\1\0\2\4\14\0\1\234"+
    "\4\335\1\0\1\335\20\0\1\40\1\335\5\0\1\110"+
    "\1\0\1\111\1\112\1\113\1\0\1\45\1\114\5\0"+
    "\1\47\3\0\1\115\5\0\1\116\1\0\1\117\2\0"+
    "\1\120\2\0\1\54\4\0\1\47\1\0\1\110\1\0"+
    "\1\111\1\112\1\113\1\0\1\45\1\114\1\335\1\144"+
    "\3\335\1\47\1\144\2\0\1\115\5\0\1\116\1\0"+
    "\1\117\2\0\1\120\2\0\1\54\1\144\3\0\1\47"+
    "\1\0\1\110\1\0\1\111\1\112\1\113\1\0\1\45"+
    "\1\114\1\144\3\0\1\144\1\47\3\0\1\115\5\0"+
    "\1\116\1\0\1\117\2\0\1\120\2\0\1\54\4\0"+
    "\1\47\1\0\1\110\1\0\1\111\1\112\1\113\1\0"+
    "\1\45\1\114\1\275\1\335\1\275\1\335\1\275\1\47"+
    "\1\335\2\0\1\115\5\0\1\116\1\0\1\117\2\0"+
    "\1\120\2\0\1\54\1\335\3\0\1\47\30\0\1\303"+
    "\20\0\1\336\47\0\1\337\67\0\1\331\40\0\1\340"+
    "\25\0\1\341\65\0\1\301\31\0\1\340\64\0\1\342"+
    "\46\0\1\343\27\0\1\344\36\0\2\4\1\345\3\4"+
    "\1\0\6\4\1\0\21\4\1\0\2\4\23\0\1\346"+
    "\5\0\1\226\20\0\6\4\1\0\1\4\5\242\1\0"+
    "\1\242\20\4\1\0\1\242\1\4\4\0\6\4\1\0"+
    "\6\4\1\0\4\4\1\347\14\4\1\0\2\4\4\0"+
    "\5\4\1\171\1\0\6\4\1\0\21\4\1\0\2\4"+
    "\31\0\1\330\52\0\1\350\32\0\1\241\47\0\1\351"+
    "\50\0\1\241\24\0\1\322\64\0\1\326\27\0\1\352"+
    "\51\0\5\264\1\0\1\264\21\0\1\264\5\0\1\4"+
    "\1\353\4\4\1\0\6\4\1\0\21\4\1\0\2\4"+
    "\4\0\6\4\1\0\6\4\1\0\4\4\1\354\14\4"+
    "\1\0\2\4\4\0\1\110\1\0\1\111\1\112\1\164"+
    "\1\0\1\100\1\114\5\0\1\47\3\0\1\115\5\0"+
    "\1\116\1\0\1\117\5\0\1\40\4\0\1\47\2\0"+
    "\1\355\74\0\1\331\23\0\1\237\41\0\1\356\44\0"+
    "\1\357\66\0\1\360\50\0\1\306\20\0\1\4\1\171"+
    "\4\4\1\0\6\4\1\0\21\4\1\0\2\4\26\0"+
    "\1\361\30\0\1\241\41\0\1\362\44\0\6\4\1\0"+
    "\6\4\1\0\12\4\1\171\6\4\1\0\2\4\4\0"+
    "\6\4\1\0\6\4\1\0\4\4\1\363\14\4\1\0"+
    "\2\4\5\0\1\364\72\0\1\365\40\0\1\357\25\0"+
    "\1\241\74\0\1\241\15\0\6\4\1\0\1\161\5\4"+
    "\1\0\21\4\1\0\2\4\6\0\1\366\65\0\1\367"+
    "\45\0\1\370\32\0\1\331\35\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8930];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\35\1\1\0\4\1\1\0\1\1\1\0"+
    "\4\1\1\0\6\1\1\0\2\1\2\0\10\1\2\0"+
    "\6\1\11\0\1\1\1\0\6\1\1\0\3\1\1\11"+
    "\1\1\20\0\5\1\1\0\1\11\6\1\12\0\1\1"+
    "\1\0\10\1\16\0\1\1\1\0\24\1\3\0\5\1"+
    "\5\0\1\1\2\0\1\1\1\0\2\1\2\0\3\1"+
    "\1\0\3\1\10\0\1\11\3\1\10\0\1\1\1\0"+
    "\1\1\3\0\2\1\6\0\1\1\5\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[248];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  String name;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 150) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 2: 
          { return new WordToken(yytext());
          }
        case 6: break;
        case 3: 
          { return new TagToken(yytext());
          }
        case 7: break;
        case 5: 
          { String contents = yytext();
	String[] split = contents.split("\\s+", 2);

	// Handles the optional qualifier
	if (split.length == 2 && (split[0].equalsIgnoreCase("at") || split[0].equalsIgnoreCase("from"))) {
		return new TimeToken(split[1].trim());
	}
	else {
		return new TimeToken(yytext());
	}
          }
        case 8: break;
        case 4: 
          { String contents = yytext();
	String[] split = contents.split("\\s+", 2);

	// Handles the optional qualifier
	if (split.length == 2 && (split[0].equalsIgnoreCase("on") || split[0].equalsIgnoreCase("from"))) {
		return new DateToken(split[1].trim());
	}
	else {
		return new DateToken(yytext());
	}
          }
        case 9: break;
        case 1: 
          { 
          }
        case 10: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
